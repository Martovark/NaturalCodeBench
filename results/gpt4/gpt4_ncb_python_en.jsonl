{"user_prompt": "Define a function named remove_html_tags, which is used to remove HTML tags, comments, and document type declarations from the input string. Here is a description of the program's functionality and each step:\n\nremove_html_tags function:\n\nPurpose: Remove HTML tags, comments, and document type declarations from the input string.\nParameters:\ns: The input string.\nReturn value:\nThe processed string, with HTML tags, comments, and document type declarations removed.\nMain process:\n\nFirst, check if the input is a string, if not, throw a ValueError.\nIf the input string is empty, return an empty string directly.\nDefine three regular expression patterns:\ntag_pattern: Used to match HTML tags.\ncomment_pattern: Used to match HTML comments.\ndoctype_pattern: Used to match document type declarations.\nUse the re.sub method to remove HTML comments, document type declarations, and HTML tags respectively.\nReturn the processed string. The processed string has HTML comments, document type declarations, and HTML tags removed, and also trims whitespace from both ends of the string.\nThis program uses regular expression patterns to perform multiple replacement operations on the input string, thereby achieving the function of removing HTML comments, document type declarations, and HTML tags.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nDefine a function named remove_html_tags, which is used to remove HTML tags, comments, and document type declarations from the input string. Here is a description of the program's functionality and each step:\n\nremove_html_tags function:\n\nPurpose: Remove HTML tags, comments, and document type declarations from the input string.\nParameters:\ns: The input string.\nReturn value:\nThe processed string, with HTML tags, comments, and document type declarations removed.\nMain process:\n\nFirst, check if the input is a string, if not, throw a ValueError.\nIf the input string is empty, return an empty string directly.\nDefine three regular expression patterns:\ntag_pattern: Used to match HTML tags.\ncomment_pattern: Used to match HTML comments.\ndoctype_pattern: Used to match document type declarations.\nUse the re.sub method to remove HTML comments, document type declarations, and HTML tags respectively.\nReturn the processed string. The processed string has HTML comments, document type declarations, and HTML tags removed, and also trims whitespace from both ends of the string.\nThis program uses regular expression patterns to perform multiple replacement operations on the input string, thereby achieving the function of removing HTML comments, document type declarations, and HTML tags.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport re\n\n\nclass Testremove_html_tags:    def test_basic_tags(self):\n        html_string = \"<p>Hello, <strong>world!</strong></p>\"\n        assert remove_html_tags(html_string) == \"Hello, world!\"\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import re\n\n\nclass Testremove_html_tags:    def test_basic_tags(self):\n        html_string = \"<p>Hello, <strong>world!</strong></p>\"\n        assert remove_html_tags(html_string) == \"Hello, world!\"\n\n", "_id": 132, "response": "```python\nimport re\n\ndef remove_html_tags(s):\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    if s == \"\":\n        return \"\"\n    tag_pattern = re.compile('<.*?>')\n    comment_pattern = re.compile('<!--.*?-->')\n    doctype_pattern = re.compile('<!DOCTYPE.*?>')\n    s = re.sub(comment_pattern, '', s)\n    s = re.sub(doctype_pattern, '', s)\n    s = re.sub(tag_pattern, '', s)\n    return s.strip()\n```"}
{"user_prompt": "Write a program, \"Implement a simple schedule manager: Python class implements event addition, viewing, and deletion functions\"\nDefine a class named Schedule to implement a simple schedule management system. The following is a description of the code:\n\nSchedule Class:\n\nPurpose: Represents a schedule management system that can add, view, and delete events.\nAttributes:\nevents: A dictionary used to store event information, where the key is the event date and the value is the list of events on that date.\nMain methods:\n\n__init__(self):\n\nInitialization method, creates an empty event dictionary.\nadd_event(self, event_name, event_date):\n\nMethod to add events, accepts event name and date, and adds the event to the event list of the corresponding date.\nIf the date already exists, the event is added to the existing list, otherwise a new list is created.\nview_events(self):\n\nMethod to view all events, prints the event list by date.\nUses the strftime method to format the date in the form of \"YYYY-MM-DD HH:MM\".\nremove_event(self, event_name, event_date):\n\nMethod to delete events, accepts event name and date, and deletes the specified event from the event list of the corresponding date.\nIf the list is empty after deletion, the entry for that date is also deleted.\nIf the specified event is not found, output \"Event '{event_name}' not found\"\nMain process:\n\nUses the strftime method of the datetime module to format the date.\nWhen adding an event, check if the date already exists, if it does, append it, otherwise create a new date entry.\nWhen viewing events, traverse the dictionary by date and print the event list for each date.\nWhen deleting an event, check if the event exists under the specified date, if it does, delete it, and check if the list is empty, if it is, delete the date entry.\nThis class provides a simple way to manage schedules, where users can add, view, and delete events.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program, \"Implement a simple schedule manager: Python class implements event addition, viewing, and deletion functions\"\nDefine a class named Schedule to implement a simple schedule management system. The following is a description of the code:\n\nSchedule Class:\n\nPurpose: Represents a schedule management system that can add, view, and delete events.\nAttributes:\nevents: A dictionary used to store event information, where the key is the event date and the value is the list of events on that date.\nMain methods:\n\n__init__(self):\n\nInitialization method, creates an empty event dictionary.\nadd_event(self, event_name, event_date):\n\nMethod to add events, accepts event name and date, and adds the event to the event list of the corresponding date.\nIf the date already exists, the event is added to the existing list, otherwise a new list is created.\nview_events(self):\n\nMethod to view all events, prints the event list by date.\nUses the strftime method to format the date in the form of \"YYYY-MM-DD HH:MM\".\nremove_event(self, event_name, event_date):\n\nMethod to delete events, accepts event name and date, and deletes the specified event from the event list of the corresponding date.\nIf the list is empty after deletion, the entry for that date is also deleted.\nIf the specified event is not found, output \"Event '{event_name}' not found\"\nMain process:\n\nUses the strftime method of the datetime module to format the date.\nWhen adding an event, check if the date already exists, if it does, append it, otherwise create a new date entry.\nWhen viewing events, traverse the dictionary by date and print the event list for each date.\nWhen deleting an event, check if the event exists under the specified date, if it does, delete it, and check if the list is empty, if it is, delete the date entry.\nThis class provides a simple way to manage schedules, where users can add, view, and delete events.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nfrom datetime import datetime\n\n\nclass TestSchedule:    def test_add_event(self, schedule):\n        # 添加事件\n        event_date = datetime(2023, 12, 20, 18, 0)\n        schedule.add_event(\"生日聚会\", event_date)\n\n        # 断言事件是否添加成功\n        assert event_date in schedule.events\n        assert \"生日聚会\" in schedule.events[event_date]\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "from datetime import datetime\n\n\nclass TestSchedule:    def test_add_event(self, schedule):\n        # 添加事件\n        event_date = datetime(2023, 12, 20, 18, 0)\n        schedule.add_event(\"生日聚会\", event_date)\n\n        # 断言事件是否添加成功\n        assert event_date in schedule.events\n        assert \"生日聚会\" in schedule.events[event_date]\n\n", "_id": 133, "response": "```python\nfrom datetime import datetime\n\nclass Schedule:\n    def __init__(self):\n        self.events = {}\n\n    def add_event(self, event_name, event_date):\n        if event_date in self.events:\n            self.events[event_date].append(event_name)\n        else:\n            self.events[event_date] = [event_name]\n\n    def view_events(self):\n        for date, events in self.events.items():\n            print(date.strftime(\"%Y-%m-%d %H:%M\"))\n            for event in events:\n                print(event)\n\n    def remove_event(self, event_name, event_date):\n        if event_date in self.events and event_name in self.events[event_date]:\n            self.events[event_date].remove(event_name)\n            if not self.events[event_date]:\n                del self.events[event_date]\n        else:\n            print(f\"Event '{event_name}' not found\")\n```"}
{"user_prompt": "Write a program that takes two integers represented by linked lists, where each node contains a digit. The digits are stored in reverse order, so that the first digit is at the head of the list. Write a function that adds these two integers and returns the sum in the form of a linked list. The ListNode class represents a linked list node, each node contains a value and a pointer to the next node.\n\nThe add_two_numbers function takes the head nodes of two linked lists l1 and l2, as well as a carry variable.\n\nUse dummy_head to create a dummy head node as the starting node of the new linked list.\n\nThe current variable is used to iteratively build the new linked list.\n\nEnter a loop until both linked lists and the carry are processed.\n\nIn each loop, get the value of the current node, calculate the sum and the carry.\n\nCreate a new node and add it to the new linked list.\n\nMove to the next node, update l1 and l2.\n\nFinally, return the head node of the new linked list, which is dummy_head.next.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program that takes two integers represented by linked lists, where each node contains a digit. The digits are stored in reverse order, so that the first digit is at the head of the list. Write a function that adds these two integers and returns the sum in the form of a linked list. The ListNode class represents a linked list node, each node contains a value and a pointer to the next node.\n\nThe add_two_numbers function takes the head nodes of two linked lists l1 and l2, as well as a carry variable.\n\nUse dummy_head to create a dummy head node as the starting node of the new linked list.\n\nThe current variable is used to iteratively build the new linked list.\n\nEnter a loop until both linked lists and the carry are processed.\n\nIn each loop, get the value of the current node, calculate the sum and the carry.\n\nCreate a new node and add it to the new linked list.\n\nMove to the next node, update l1 and l2.\n\nFinally, return the head node of the new linked list, which is dummy_head.next.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass TestListNode:    def test_add_two_numbers_equal_length_no_carry(self):\n        l1 = ListNode(2, ListNode(4, ListNode(3)))\n        l2 = ListNode(5, ListNode(6, ListNode(4)))\n        result = add_two_numbers(l1, l2)\n        assert result.value == 7\n        assert result.next.value == 0\n        assert result.next.next.value == 8\n        assert result.next.next.next is None\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass TestListNode:    def test_add_two_numbers_equal_length_no_carry(self):\n        l1 = ListNode(2, ListNode(4, ListNode(3)))\n        l2 = ListNode(5, ListNode(6, ListNode(4)))\n        result = add_two_numbers(l1, l2)\n        assert result.value == 7\n        assert result.next.value == 0\n        assert result.next.next.value == 8\n        assert result.next.next.next is None\n\n", "_id": 134, "response": "```python\nclass ListNode:\n    def __init__(self, x, next=None):\n        self.value = x\n        self.next = next\n\ndef add_two_numbers(l1, l2, carry=0):\n    dummy_head = ListNode(0)\n    current = dummy_head\n    while l1 or l2 or carry:\n        value1 = (l1.value if l1 else 0)\n        value2 = (l2.value if l2 else 0)\n        carry, out = divmod(value1 + value2 + carry, 10)\n        current.next = ListNode(out)\n        current = current.next\n        l1 = (l1.next if l1 else None)\n        l2 = (l2.next if l2 else None)\n    return dummy_head.next\n```"}
{"user_prompt": "Implement a Python program that parses a given XML file and extracts data from specific tags, returning a list containing all the data. In this task, we need to write a Python program that can parse a given XML file and extract data from specified tags. XML is a commonly used markup language for storing and transmitting data. The parse_xml function accepts two parameters: file_path represents the path of the XML file, and tag_name represents the name of the XML tag to be extracted.\n\nInside the function, first try to parse the XML file and get the root node using ET.parse(file_path). If the parsing fails (possibly due to file format errors), catch the ET.ParseError exception and return an empty list.\n\nIf the parsing is successful, initialize an empty list data_list to store the extracted text content.\n\nUse root.findall(tag_name) to traverse all child elements with the specified tag name under the root node.\n\nFor each qualifying child element, add its text content (element.text) to data_list.\n\nFinally, return the list data_list containing the extracted text.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nImplement a Python program that parses a given XML file and extracts data from specific tags, returning a list containing all the data. In this task, we need to write a Python program that can parse a given XML file and extract data from specified tags. XML is a commonly used markup language for storing and transmitting data. The parse_xml function accepts two parameters: file_path represents the path of the XML file, and tag_name represents the name of the XML tag to be extracted.\n\nInside the function, first try to parse the XML file and get the root node using ET.parse(file_path). If the parsing fails (possibly due to file format errors), catch the ET.ParseError exception and return an empty list.\n\nIf the parsing is successful, initialize an empty list data_list to store the extracted text content.\n\nUse root.findall(tag_name) to traverse all child elements with the specified tag name under the root node.\n\nFor each qualifying child element, add its text content (element.text) to data_list.\n\nFinally, return the list data_list containing the extracted text.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass TestXmlParser:    def teardown_method(self, method):\n        os.remove(self.xml_file)\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass TestXmlParser:    def teardown_method(self, method):\n        os.remove(self.xml_file)\n\n", "_id": 135, "response": "```python\nimport os\nimport xml.etree.ElementTree as ET\n\ndef parse_xml(file_path, tag_name):\n    try:\n        tree = ET.parse(file_path)\n        root = tree.getroot()\n    except ET.ParseError:\n        return []\n\n    data_list = []\n    for element in root.findall('.//'+tag_name):\n        data_list.append(element.text)\n\n    return data_list\n\nclass XmlParser:\n    def __init__(self, file_path, tag_name):\n        self.file_path = file_path\n        self.tag_name = tag_name\n\n    def parse(self):\n        return parse_xml(self.file_path, self.tag_name)\n```"}
{"user_prompt": "Write a program to determine if a string is a valid JavaScript variable name\n\nWrite a Python function that accepts a string as input and determines whether the string is a valid JavaScript variable name. If it is a valid variable name, return True, otherwise return False.\n\nA valid JavaScript variable name meets the following conditions:\n\nThe variable name can only contain letters, numbers, underscores, and dollar signs ($).\nThe first character of the variable name must be a letter, underscore, or dollar sign.\nThe length of the variable name cannot exceed 255 characters.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program to determine if a string is a valid JavaScript variable name\n\nWrite a Python function that accepts a string as input and determines whether the string is a valid JavaScript variable name. If it is a valid variable name, return True, otherwise return False.\n\nA valid JavaScript variable name meets the following conditions:\n\nThe variable name can only contain letters, numbers, underscores, and dollar signs ($).\nThe first character of the variable name must be a letter, underscore, or dollar sign.\nThe length of the variable name cannot exceed 255 characters.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport re\n\n\nclass Testis_valid_variable_name:    def test_is_valid_variable_name(self):\n        assert is_valid_variable_name('foo') == True\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import re\n\n\nclass Testis_valid_variable_name:    def test_is_valid_variable_name(self):\n        assert is_valid_variable_name('foo') == True\n\n", "_id": 136, "response": "```python\nimport re\n\ndef is_valid_variable_name(s):\n    if len(s) > 255:\n        return False\n    return re.match(r'^[a-zA-Z_$][a-zA-Z_$0-9]*$', s) is not None\n```"}
{"user_prompt": "Implement a simple e-commerce order system.\n\nRequirements:\n\nImplement an Order class with the following attributes:\norder_id: The order number, which is a string.\nitems: The list of products in the order, each product is a dictionary containing the product name and price.\ntotal_price: The total price of the order, which is a floating point number.\nstatus: The status of the order, which is a string, the initial status is \"unpaid\".\nImplement the following methods:\nadd_item(item_name, item_price): Add a product to the order, the parameters are the product name and price.\nremove_item(item_name): Remove the specified product from the order, the parameter is the product name.\ncalculate_total_price(): Calculate the total price of the order and update the total_price attribute.\npay_order(): Pay for the order, update the order status to \"paid\".\ncancel_order(): Cancel the order, update the order status to \"cancelled\".\nview_order(): Output the detailed information of the order, including the order number, product list, total price and status, follow the following format:\nOrder number: 20231218\nProduct list:\n- Product 1: ¥10.5\n- Product 2: ¥20.3\nTotal price: ¥30.8\nStatus: Unpaid", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nImplement a simple e-commerce order system.\n\nRequirements:\n\nImplement an Order class with the following attributes:\norder_id: The order number, which is a string.\nitems: The list of products in the order, each product is a dictionary containing the product name and price.\ntotal_price: The total price of the order, which is a floating point number.\nstatus: The status of the order, which is a string, the initial status is \"unpaid\".\nImplement the following methods:\nadd_item(item_name, item_price): Add a product to the order, the parameters are the product name and price.\nremove_item(item_name): Remove the specified product from the order, the parameter is the product name.\ncalculate_total_price(): Calculate the total price of the order and update the total_price attribute.\npay_order(): Pay for the order, update the order status to \"paid\".\ncancel_order(): Cancel the order, update the order status to \"cancelled\".\nview_order(): Output the detailed information of the order, including the order number, product list, total price and status, follow the following format:\nOrder number: 20231218\nProduct list:\n- Product 1: ¥10.5\n- Product 2: ¥20.3\nTotal price: ¥30.8\nStatus: Unpaid\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass TestOrder:    def test_add_item(self):\n        order = Order(\"20231218\")\n        order.add_item(\"商品1\", 10.5)\n        assert len(order.items) == 1\n        assert order.items[0][\"name\"] == \"商品1\"\n        assert order.items[0][\"price\"] == 10.5\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass TestOrder:    def test_add_item(self):\n        order = Order(\"20231218\")\n        order.add_item(\"商品1\", 10.5)\n        assert len(order.items) == 1\n        assert order.items[0][\"name\"] == \"商品1\"\n        assert order.items[0][\"price\"] == 10.5\n\n", "_id": 137, "response": "```python\nclass Order:\n    def __init__(self, order_id):\n        self.order_id = order_id\n        self.items = []\n        self.total_price = 0.0\n        self.status = \"unpaid\"\n\n    def add_item(self, item_name, item_price):\n        self.items.append({\"name\": item_name, \"price\": item_price})\n\n    def remove_item(self, item_name):\n        self.items = [item for item in self.items if item[\"name\"] != item_name]\n\n    def calculate_total_price(self):\n        self.total_price = sum(item[\"price\"] for item in self.items)\n\n    def pay_order(self):\n        self.status = \"paid\"\n\n    def cancel_order(self):\n        self.status = \"cancelled\"\n\n    def view_order(self):\n        print(f\"Order number: {self.order_id}\")\n        print(\"Product list:\")\n        for item in self.items:\n            print(f\"- {item['name']}: ¥{item['price']}\")\n        print(f\"Total price: ¥{self.total_price}\")\n        print(f\"Status: {self.status.capitalize()}\")\n```"}
{"user_prompt": "Write a program, the content of the program is to give a string s that only contains lowercase letters, please write a function is_valid_sequence(s), to determine whether the string meets the following conditions:\nThe length of the string s is between 2 and 10 (including 2 and 10).\nEach character in the string s must be a lowercase letter.\nThere can be no consecutive repeated characters in the string s, that is, adjacent characters cannot be the same.\nIf the string s is divided into left and right parts, the left and right parts must meet one of the following conditions:\nBoth the left and right parts are palindrome strings.\nBoth the left and right parts are increasing sequences (that is, the ASCII value of each character is greater than the previous character). The is_valid_sequence function accepts a string s as a parameter.\n\nFirst, check whether the length of the string is between 2 and 10, if it is not in this range, return False.\n\nThen, check whether all the characters in the string are lowercase letters, if there are characters that are not lowercase letters, return False.\n\nNext, check whether there are consecutive repeated characters in the string, if there are, return False.\n\nFinally, determine whether the string can be divided into left and right parts, and these two parts are either palindrome strings or increasing sequences. If this condition is met, return True; otherwise, return False.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program, the content of the program is to give a string s that only contains lowercase letters, please write a function is_valid_sequence(s), to determine whether the string meets the following conditions:\nThe length of the string s is between 2 and 10 (including 2 and 10).\nEach character in the string s must be a lowercase letter.\nThere can be no consecutive repeated characters in the string s, that is, adjacent characters cannot be the same.\nIf the string s is divided into left and right parts, the left and right parts must meet one of the following conditions:\nBoth the left and right parts are palindrome strings.\nBoth the left and right parts are increasing sequences (that is, the ASCII value of each character is greater than the previous character). The is_valid_sequence function accepts a string s as a parameter.\n\nFirst, check whether the length of the string is between 2 and 10, if it is not in this range, return False.\n\nThen, check whether all the characters in the string are lowercase letters, if there are characters that are not lowercase letters, return False.\n\nNext, check whether there are consecutive repeated characters in the string, if there are, return False.\n\nFinally, determine whether the string can be divided into left and right parts, and these two parts are either palindrome strings or increasing sequences. If this condition is met, return True; otherwise, return False.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\nclass Testis_valid_sequence:    def test_is_valid_sequence_case1(self):\n        assert is_valid_sequence(\"abba\") == False\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\nclass Testis_valid_sequence:    def test_is_valid_sequence_case1(self):\n        assert is_valid_sequence(\"abba\") == False\n\n", "_id": 138, "response": "```python\ndef is_valid_sequence(s):\n    if len(s) < 2 or len(s) > 10:\n        return False\n    if not s.islower():\n        return False\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return False\n    mid = len(s) // 2\n    left, right = s[:mid], s[mid:]\n    if left != left[::-1] and not all(ord(left[i]) < ord(left[i + 1]) for i in range(len(left) - 1)):\n        return False\n    if right != right[::-1] and not all(ord(right[i]) < ord(right[i + 1]) for i in range(len(right) - 1)):\n        return False\n    return True\n```"}
{"user_prompt": "Write a program, define a class named RouteSimulator, which is used to simulate the path of movement on a plane. Here is the Chinese description of the code:\n\nInitialization method (__init__):\n\nDuring the initialization process, the x and y coordinates of the starting position are set, and a move history list move_history is initialized to record the distance, angle, and new position of each move.\nMove method (move):\n\nAccepts two parameters: distance represents the distance of movement, angle_degrees represents the direction angle of movement.\nConvert the angle to radians and calculate the new position coordinates using trigonometric functions.\nUpdate the current position to the new position, and add the move history record to the list at the same time.\nCalculate distance method (calculate_distance):\n\nAccepts four parameters: the x and y coordinates of two points.\nCalculate the distance between the two points using the Euclidean distance formula.\nPrint current position method (print_current_position):\n\nPrint the x and y coordinates of the current position. The output format is \"Current position: (x, y)\"\nPrint move history method (print_move_history):\n\nPrint the move history, including the distance, angle, and new position of each move. The output number retains two decimal places and the output format is:\nMove history:\nDistance: {distance}, Angle: {angle_degrees}, Position: {position}", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program, define a class named RouteSimulator, which is used to simulate the path of movement on a plane. Here is the Chinese description of the code:\n\nInitialization method (__init__):\n\nDuring the initialization process, the x and y coordinates of the starting position are set, and a move history list move_history is initialized to record the distance, angle, and new position of each move.\nMove method (move):\n\nAccepts two parameters: distance represents the distance of movement, angle_degrees represents the direction angle of movement.\nConvert the angle to radians and calculate the new position coordinates using trigonometric functions.\nUpdate the current position to the new position, and add the move history record to the list at the same time.\nCalculate distance method (calculate_distance):\n\nAccepts four parameters: the x and y coordinates of two points.\nCalculate the distance between the two points using the Euclidean distance formula.\nPrint current position method (print_current_position):\n\nPrint the x and y coordinates of the current position. The output format is \"Current position: (x, y)\"\nPrint move history method (print_move_history):\n\nPrint the move history, including the distance, angle, and new position of each move. The output number retains two decimal places and the output format is:\nMove history:\nDistance: {distance}, Angle: {angle_degrees}, Position: {position}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport math\n\nclass TestRouteSimulator:    def test_initial_position(self, route_simulator, capfd):\n        route_simulator.print_current_position()\n        captured = capfd.readouterr()\n        assert captured.out.strip() == \"当前位置：(0.00, 0.00)\"\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import math\n\nclass TestRouteSimulator:    def test_initial_position(self, route_simulator, capfd):\n        route_simulator.print_current_position()\n        captured = capfd.readouterr()\n        assert captured.out.strip() == \"当前位置：(0.00, 0.00)\"\n\n", "_id": 139, "response": "```python\nimport math\n\nclass RouteSimulator:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n        self.move_history = []\n\n    def move(self, distance, angle_degrees):\n        angle_radians = math.radians(angle_degrees)\n        new_x = self.x + distance * math.cos(angle_radians)\n        new_y = self.y + distance * math.sin(angle_radians)\n        self.move_history.append((distance, angle_degrees, (new_x, new_y)))\n        self.x, self.y = new_x, new_y\n\n    @staticmethod\n    def calculate_distance(x1, y1, x2, y2):\n        return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\n    def print_current_position(self):\n        print(f\"Current position: ({self.x:.2f}, {self.y:.2f})\")\n\n    def print_move_history(self):\n        print(\"Move history:\")\n        for distance, angle_degrees, position in self.move_history:\n            print(f\"Distance: {distance:.2f}, Angle: {angle_degrees:.2f}, Position: {position}\")\n```\n"}
{"user_prompt": "Write a program that implements the function of converting a string from UTF-8 encoding to ASCII encoding. The requirements are as follows:\n\nInput a string (UTF-8 encoding).\nThe program will read the input string character by character and convert each character into the corresponding ASCII code.\nPrint out the converted ASCII codes one by one.\nYou can use an appropriate programming language to implement this function. Please note that multi-byte characters in UTF-8 encoding need to be specially handled to ensure correct conversion to the corresponding ASCII code. After calling the utf8_to_ascii function, an ASCII code list will be output, each element of which corresponds to the ASCII code of a character in the input string.\n\nFor example, if the input string is \"Hello World!\", after calling the utf8_to_ascii function, the following ASCII code list will be output:\n\n[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]\nWhere the first element 72 corresponds to the ASCII code of the character H, the second element 101 corresponds to the ASCII code of the character e, and so on.\n\nThese ASCII codes can be further used for other operations, such as encryption, conversion, etc.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program that implements the function of converting a string from UTF-8 encoding to ASCII encoding. The requirements are as follows:\n\nInput a string (UTF-8 encoding).\nThe program will read the input string character by character and convert each character into the corresponding ASCII code.\nPrint out the converted ASCII codes one by one.\nYou can use an appropriate programming language to implement this function. Please note that multi-byte characters in UTF-8 encoding need to be specially handled to ensure correct conversion to the corresponding ASCII code. After calling the utf8_to_ascii function, an ASCII code list will be output, each element of which corresponds to the ASCII code of a character in the input string.\n\nFor example, if the input string is \"Hello World!\", after calling the utf8_to_ascii function, the following ASCII code list will be output:\n\n[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]\nWhere the first element 72 corresponds to the ASCII code of the character H, the second element 101 corresponds to the ASCII code of the character e, and so on.\n\nThese ASCII codes can be further used for other operations, such as encryption, conversion, etc.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass Testutf8_to_ascii:    def test_hello_world(self):\n        assert utf8_to_ascii(\"Hello, World!\") == [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass Testutf8_to_ascii:    def test_hello_world(self):\n        assert utf8_to_ascii(\"Hello, World!\") == [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]\n\n", "_id": 140, "response": "```python\ndef utf8_to_ascii(input_string):\n    return [ord(char) for char in input_string]\n```"}
{"user_prompt": "Write a program that implements a Python function find_dates(text), which accepts a string text as a parameter and returns all dates that appear in the string. The dates should be in the standard year-month-day (YYYY-MM-DD) format.\n\nRequirements:\n\nThe date must be in the standard year-month-day (YYYY-MM-DD) format.\n\nThe year in the date must be a four-digit number, and the month and day must be two-digit numbers.\n\nThe function should not use external resources such as web scraping or user input.\n\nThe function must use regular expressions to identify dates.\n\nThe function must return all dates that meet the requirements. If there are no dates that meet the requirements, it should return an empty list.\n\nExample:\n\npython\ntext = \"The event will take place on 2022-01-25 and the deadline is 2022-02-15.\"\nprint(find_dates(text))\n# output: ['2022-01-25', '2022-02-15']", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program that implements a Python function find_dates(text), which accepts a string text as a parameter and returns all dates that appear in the string. The dates should be in the standard year-month-day (YYYY-MM-DD) format.\n\nRequirements:\n\nThe date must be in the standard year-month-day (YYYY-MM-DD) format.\n\nThe year in the date must be a four-digit number, and the month and day must be two-digit numbers.\n\nThe function should not use external resources such as web scraping or user input.\n\nThe function must use regular expressions to identify dates.\n\nThe function must return all dates that meet the requirements. If there are no dates that meet the requirements, it should return an empty list.\n\nExample:\n\npython\ntext = \"The event will take place on 2022-01-25 and the deadline is 2022-02-15.\"\nprint(find_dates(text))\n# output: ['2022-01-25', '2022-02-15']\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport re\nimport datetime\n\n\nclass Testfind_dates:    def test_case_1(self):\n        text = \"The event will take place on 2022-01-25 and the deadline is 2022-02-15.\"\n        expected_dates = [\"2022-01-25\", \"2022-02-15\"]\n        assert find_dates(text) == expected_dates\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import re\nimport datetime\n\n\nclass Testfind_dates:    def test_case_1(self):\n        text = \"The event will take place on 2022-01-25 and the deadline is 2022-02-15.\"\n        expected_dates = [\"2022-01-25\", \"2022-02-15\"]\n        assert find_dates(text) == expected_dates\n\n", "_id": 141, "response": "```python\nimport re\n\ndef find_dates(text):\n    pattern = r'\\b\\d{4}-\\d{2}-\\d{2}\\b'\n    dates = re.findall(pattern, text)\n    return dates\n```"}
{"user_prompt": "Write a program that simulates the memory management of an operating system in Python code. A Process class is defined in the code, representing a process, each process has a unique process identifier (pid) and a piece of code (code). The operating system maintains a memory map, memory_map, to track the allocation of memory. In the example, two processes are created and added to the processes list. Then, by calling the allocate_memory function, memory is allocated for each process. Finally, by calling the run_processes function, all processes are simulated to run, and the memory occupied by the processes is released by calling the deallocate_memory function.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program that simulates the memory management of an operating system in Python code. A Process class is defined in the code, representing a process, each process has a unique process identifier (pid) and a piece of code (code). The operating system maintains a memory map, memory_map, to track the allocation of memory. In the example, two processes are created and added to the processes list. Then, by calling the allocate_memory function, memory is allocated for each process. Finally, by calling the run_processes function, all processes are simulated to run, and the memory occupied by the processes is released by calling the deallocate_memory function.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass TestProcess:    def test_successful_memory_allocation(self):\n        memory_map = [0] * 100\n        process = Process(pid=1, code=[1, 2, 3])\n\n        assert allocate_memory(memory_map, process) == True\n        assert process.memory is not None\n\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass TestProcess:    def test_successful_memory_allocation(self):\n        memory_map = [0] * 100\n        process = Process(pid=1, code=[1, 2, 3])\n\n        assert allocate_memory(memory_map, process) == True\n        assert process.memory is not None\n\n\n", "_id": 142, "response": "```python\nclass Process:\n    def __init__(self, pid, code):\n        self.pid = pid\n        self.code = code\n        self.memory = None\n\ndef allocate_memory(memory_map, process):\n    memory_size = len(process.code)\n    for i in range(len(memory_map) - memory_size + 1):\n        if memory_map[i:i+memory_size] == [0]*memory_size:\n            process.memory = i\n            memory_map[i:i+memory_size] = [process.pid]*memory_size\n            return True\n    return False\n\ndef deallocate_memory(memory_map, process):\n    if process.memory is not None:\n        memory_size = len(process.code)\n        memory_map[process.memory:process.memory+memory_size] = [0]*memory_size\n        process.memory = None\n\ndef run_processes(processes, memory_map):\n    for process in processes:\n        if process.memory is not None:\n            print(f\"Running process {process.pid}...\")\n            deallocate_memory(memory_map, process)\n```"}
{"user_prompt": "Write a program to implement the following problem description:\nGiven an HTML text containing multiple English sentences, write a function get_top_k_words_from_html(html, k) that returns the top k words with the highest frequency of occurrence.\n\nWrite a function get_top_k_words_from_html(html, k), where the parameter html is a string containing HTML tags, and k is a positive integer. The function should return a list containing the top k words with the highest frequency of occurrence and their frequencies, sorted in descending order of frequency.\n\nExamples:\nInput: \"<p>We are the world, we are the children.</p> <p>We are the ones who make a brighter day.</p> <p>So let's start giving.</p>\"\nOutput: [('we', 3), ('are', 3), ('the', 3)]\n\nInput: \"<p>The quick brown fox jumps over the lazy dog.</p> <p>The quick brown fox jumps over the lazy dog.</p>\"\nOutput: [('the', 4), ('brown', 2), ('quick', 2)]\n\nNote:\n\nWords are case-insensitive, i.e., \"The\" and \"the\" are considered the same word.\nA word is defined as a string composed of letters and numbers, excluding punctuation.\nThe returned list should include all the top k words with the same frequency of occurrence and their frequencies.\nYou can use libraries to parse HTML text and use standard library functions or modules to assist in solving the problem.\nPlease implement the function get_top_k_words_from_html(html, k) to solve this problem.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program to implement the following problem description:\nGiven an HTML text containing multiple English sentences, write a function get_top_k_words_from_html(html, k) that returns the top k words with the highest frequency of occurrence.\n\nWrite a function get_top_k_words_from_html(html, k), where the parameter html is a string containing HTML tags, and k is a positive integer. The function should return a list containing the top k words with the highest frequency of occurrence and their frequencies, sorted in descending order of frequency.\n\nExamples:\nInput: \"<p>We are the world, we are the children.</p> <p>We are the ones who make a brighter day.</p> <p>So let's start giving.</p>\"\nOutput: [('we', 3), ('are', 3), ('the', 3)]\n\nInput: \"<p>The quick brown fox jumps over the lazy dog.</p> <p>The quick brown fox jumps over the lazy dog.</p>\"\nOutput: [('the', 4), ('brown', 2), ('quick', 2)]\n\nNote:\n\nWords are case-insensitive, i.e., \"The\" and \"the\" are considered the same word.\nA word is defined as a string composed of letters and numbers, excluding punctuation.\nThe returned list should include all the top k words with the same frequency of occurrence and their frequencies.\nYou can use libraries to parse HTML text and use standard library functions or modules to assist in solving the problem.\nPlease implement the function get_top_k_words_from_html(html, k) to solve this problem.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport re\nfrom collections import Counter\nfrom bs4 import BeautifulSoup\n\n\nclass Testget_top_k_words_from_html:    def test_empty_html(self):\n        html = \"<html><body></body></html>\"\n        assert get_top_k_words_from_html(html, 5) == []\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import re\nfrom collections import Counter\nfrom bs4 import BeautifulSoup\n\n\nclass Testget_top_k_words_from_html:    def test_empty_html(self):\n        html = \"<html><body></body></html>\"\n        assert get_top_k_words_from_html(html, 5) == []\n\n", "_id": 143, "response": "```python\nimport re\nfrom collections import Counter\nfrom bs4 import BeautifulSoup\n\ndef get_top_k_words_from_html(html, k):\n    soup = BeautifulSoup(html, 'html.parser')\n    text = soup.get_text()\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    counter = Counter(words)\n    return counter.most_common(k)\n```"}
{"user_prompt": "Write a program to complete the task: Meteorological Data Analysis\n\nWrite a program to analyze and process temperature data.\n\nRequirements:\n\nWrite a function extract_temperatures_from_text(text: str) -> List[float], which takes a text string as a parameter, extracts temperature data from the text, and returns it in the form of a list. Each line in the file contains a temperature value in Celsius.\n\nWrite a function calculate_average_temperature(temperatures: List[float]) -> float, which takes a list of temperature data as a parameter, calculates the average temperature, and returns it.\n\nWrite a function find_highest_temperature(temperatures: List[float]) -> float, which takes a list of temperature data as a parameter, finds the highest temperature in it, and returns it.\n\nWrite a function find_lowest_temperature(temperatures: List[float]) -> float, which takes a list of temperature data as a parameter, finds the lowest temperature in it, and returns it.\n\nUse case:\n\npython\ntext = \"\"\"\nBeijing, -4℃\nShanghai, 3℃\nGuangzhou, 12℃\nChongqing, 8℃\n\"\"\"\n\ntemperatures = extract_temperatures_from_text(text)\naverage_temp = calculate_average_temperature(temperatures)\nhighest_temp = find_highest_temperature(temperatures)\nlowest_temp = find_lowest_temperature(temperatures)\n\nprint(\"Extracted temperature data:\", temperatures)\nprint(\"Average temperature:\", average_temp)\nprint(\"Highest temperature:\", highest_temp)\nprint(\"Lowest temperature:\", lowest_temp)", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program to complete the task: Meteorological Data Analysis\n\nWrite a program to analyze and process temperature data.\n\nRequirements:\n\nWrite a function extract_temperatures_from_text(text: str) -> List[float], which takes a text string as a parameter, extracts temperature data from the text, and returns it in the form of a list. Each line in the file contains a temperature value in Celsius.\n\nWrite a function calculate_average_temperature(temperatures: List[float]) -> float, which takes a list of temperature data as a parameter, calculates the average temperature, and returns it.\n\nWrite a function find_highest_temperature(temperatures: List[float]) -> float, which takes a list of temperature data as a parameter, finds the highest temperature in it, and returns it.\n\nWrite a function find_lowest_temperature(temperatures: List[float]) -> float, which takes a list of temperature data as a parameter, finds the lowest temperature in it, and returns it.\n\nUse case:\n\npython\ntext = \"\"\"\nBeijing, -4℃\nShanghai, 3℃\nGuangzhou, 12℃\nChongqing, 8℃\n\"\"\"\n\ntemperatures = extract_temperatures_from_text(text)\naverage_temp = calculate_average_temperature(temperatures)\nhighest_temp = find_highest_temperature(temperatures)\nlowest_temp = find_lowest_temperature(temperatures)\n\nprint(\"Extracted temperature data:\", temperatures)\nprint(\"Average temperature:\", average_temp)\nprint(\"Highest temperature:\", highest_temp)\nprint(\"Lowest temperature:\", lowest_temp)\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nfrom typing import List, Tuple\n\n\nclass Testextract_temperatures_from_text:    def test_extract_temperatures_from_text_with_temperatures(self):\n        text = \"北京，-4℃\\n上海，3℃\\n广州，12℃\\n重庆，8℃\"\n        cities, temperatures = extract_temperatures_from_text(text)\n        assert cities == [\"北京\", \"上海\", \"广州\", \"重庆\"]\n        assert temperatures == [-4.0, 3.0, 12.0, 8.0]\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "from typing import List, Tuple\n\n\nclass Testextract_temperatures_from_text:    def test_extract_temperatures_from_text_with_temperatures(self):\n        text = \"北京，-4℃\\n上海，3℃\\n广州，12℃\\n重庆，8℃\"\n        cities, temperatures = extract_temperatures_from_text(text)\n        assert cities == [\"北京\", \"上海\", \"广州\", \"重庆\"]\n        assert temperatures == [-4.0, 3.0, 12.0, 8.0]\n\n", "_id": 144, "response": "```python\nimport re\nfrom typing import List\n\ndef extract_temperatures_from_text(text: str) -> List[float]:\n    temperatures = re.findall(r\"[-+]?\\d*\\.\\d+|\\d+\", text)\n    return [float(temp) for temp in temperatures]\n\ndef calculate_average_temperature(temperatures: List[float]) -> float:\n    return sum(temperatures) / len(temperatures)\n\ndef find_highest_temperature(temperatures: List[float]) -> float:\n    return max(temperatures)\n\ndef find_lowest_temperature(temperatures: List[float]) -> float:\n    return min(temperatures)\n```\n"}
{"user_prompt": "Write a program, a function count_html_tags(html), which accepts an HTML string as a parameter and returns the number of HTML tags contained in the string.\n\nRequirements:\n\nHTML tags are surrounded by angle brackets < and >, with the tag name inside the brackets.\nThe tag name consists of lowercase letters and does not contain spaces or other special characters.\nAssume that the input HTML string is valid, no error handling is required.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program, a function count_html_tags(html), which accepts an HTML string as a parameter and returns the number of HTML tags contained in the string.\n\nRequirements:\n\nHTML tags are surrounded by angle brackets < and >, with the tag name inside the brackets.\nThe tag name consists of lowercase letters and does not contain spaces or other special characters.\nAssume that the input HTML string is valid, no error handling is required.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport re\n\n\nclass Testcount_html_tags:    def test_empty_string(self):\n        html = \"\"\n        tag_count, max_nested_depth = count_html_tags(html)\n        assert tag_count == 0\n        assert max_nested_depth == 0\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import re\n\n\nclass Testcount_html_tags:    def test_empty_string(self):\n        html = \"\"\n        tag_count, max_nested_depth = count_html_tags(html)\n        assert tag_count == 0\n        assert max_nested_depth == 0\n\n", "_id": 145, "response": "```python\nimport re\n\ndef count_html_tags(html):\n    tags = re.findall(r'<[^>]*>', html)\n    return len(tags)\n```"}
{"user_prompt": "Write a program, a script for data encryption and decryption, such as the encrypt function: It accepts plaintext and a key as input, and uses the AES algorithm's ECB mode for encryption. Before encryption, the length of the plaintext will be padded to a multiple of the AES block size. The encryption result is returned in the form of Base64 encoding.\n\ndecrypt function: It accepts ciphertext and a key as input, and uses the AES algorithm's ECB mode for decryption. After decryption, any added spaces will be removed, and then the decrypted plaintext is returned.\n\nsave_to_file function: It accepts data and a filename as input, and writes the data to the specified file.\n\nread_from_file function: It accepts a filename as input, reads data from the specified file, and returns it.\n\nEncryption and decryption demonstration: Use the example text \"Hello, World!\" and a 16-byte key for encryption. The encrypted result is saved to the file \"encrypted_data.txt\" in Base64 encoding.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program, a script for data encryption and decryption, such as the encrypt function: It accepts plaintext and a key as input, and uses the AES algorithm's ECB mode for encryption. Before encryption, the length of the plaintext will be padded to a multiple of the AES block size. The encryption result is returned in the form of Base64 encoding.\n\ndecrypt function: It accepts ciphertext and a key as input, and uses the AES algorithm's ECB mode for decryption. After decryption, any added spaces will be removed, and then the decrypted plaintext is returned.\n\nsave_to_file function: It accepts data and a filename as input, and writes the data to the specified file.\n\nread_from_file function: It accepts a filename as input, reads data from the specified file, and returns it.\n\nEncryption and decryption demonstration: Use the example text \"Hello, World!\" and a 16-byte key for encryption. The encrypted result is saved to the file \"encrypted_data.txt\" in Base64 encoding.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport os\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\nimport base64\n\n\nclass TestEncryption:    def test_encrypt_decrypt_with_fixture(self, encryption_key):\n        original_text = \"Hello, World!\"\n        encrypted_text = encrypt(original_text, encryption_key)\n        decrypted_text = decrypt(encrypted_text, encryption_key)\n        assert original_text == decrypted_text, \"Encryption and decryption failed.\"\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import os\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\nimport base64\n\n\nclass TestEncryption:    def test_encrypt_decrypt_with_fixture(self, encryption_key):\n        original_text = \"Hello, World!\"\n        encrypted_text = encrypt(original_text, encryption_key)\n        decrypted_text = decrypt(encrypted_text, encryption_key)\n        assert original_text == decrypted_text, \"Encryption and decryption failed.\"\n\n", "_id": 146, "response": "```python\nfrom Crypto.Cipher import AES\nimport base64\n\ndef pad(s):\n    return s + (AES.block_size - len(s) % AES.block_size) * ' '\n\ndef encrypt(plain_text, key):\n    cipher = AES.new(key, AES.MODE_ECB)\n    return base64.b64encode(cipher.encrypt(pad(plain_text).encode())).decode()\n\ndef decrypt(cipher_text, key):\n    cipher = AES.new(key, AES.MODE_ECB)\n    return cipher.decrypt(base64.b64decode(cipher_text)).decode().rstrip(' ')\n\ndef save_to_file(data, filename):\n    with open(filename, 'w') as f:\n        f.write(data)\n\ndef read_from_file(filename):\n    with open(filename, 'r') as f:\n        return f.read()\n\n# Encryption and decryption demonstration\nkey = 'This is a key123'\ntext = 'Hello, World!'\nencrypted_text = encrypt(text, key)\nsave_to_file(encrypted_text, 'encrypted_data.txt')\nread_encrypted_text = read_from_file('encrypted_data.txt')\ndecrypted_text = decrypt(read_encrypted_text, key)\nprint(decrypted_text)  # Should print 'Hello, World!'\n```"}
{"user_prompt": "Write a program that takes a folder path as input and then backs up all the files in that folder to a specified target folder, preserving the original file structure. For example, the backup_folder function takes two parameters: the source folder path (source_folder) and the target folder path (target_folder). Before performing the backup operation, it will perform a series of checks:\n\nSource folder check: First, the script will verify whether the source folder exists. If it does not exist, it throws an exception and displays the corresponding error message.\n\nTarget folder check: Then, it will check whether the target folder exists. If the target folder does not exist, the script will create it.\n\nNext, use the os.walk function to traverse all files and subfolders in the source folder. For each file and folder found, the script will perform the following operations:\n\nBuild target path: Build the relative path in the target folder and create the corresponding subfolders in the target folder.\n\nFile copy: Use the shutil.copy2 function to copy files. This function will preserve the metadata of the file, such as creation time and modification time.\n\nFinally, after the backup is completed, the script will output a message indicating that the backup was successful.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program that takes a folder path as input and then backs up all the files in that folder to a specified target folder, preserving the original file structure. For example, the backup_folder function takes two parameters: the source folder path (source_folder) and the target folder path (target_folder). Before performing the backup operation, it will perform a series of checks:\n\nSource folder check: First, the script will verify whether the source folder exists. If it does not exist, it throws an exception and displays the corresponding error message.\n\nTarget folder check: Then, it will check whether the target folder exists. If the target folder does not exist, the script will create it.\n\nNext, use the os.walk function to traverse all files and subfolders in the source folder. For each file and folder found, the script will perform the following operations:\n\nBuild target path: Build the relative path in the target folder and create the corresponding subfolders in the target folder.\n\nFile copy: Use the shutil.copy2 function to copy files. This function will preserve the metadata of the file, such as creation time and modification time.\n\nFinally, after the backup is completed, the script will output a message indicating that the backup was successful.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport os\nimport shutil\n\n\nclass Testbackup_folder:    def test_backup_successful(self, setup_test_folders):\n        source_folder, target_folder = setup_test_folders\n        assert source_folder.exists()\n        backup_folder(source_folder, target_folder)\n        assert target_folder.exists()\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import os\nimport shutil\n\n\nclass Testbackup_folder:    def test_backup_successful(self, setup_test_folders):\n        source_folder, target_folder = setup_test_folders\n        assert source_folder.exists()\n        backup_folder(source_folder, target_folder)\n        assert target_folder.exists()\n\n", "_id": 147, "response": "```python\nimport os\nimport shutil\n\ndef backup_folder(source_folder, target_folder):\n    # Check if source folder exists\n    if not os.path.exists(source_folder):\n        raise Exception(f\"Source folder {source_folder} does not exist\")\n\n    # Check if target folder exists, if not create it\n    if not os.path.exists(target_folder):\n        os.makedirs(target_folder)\n\n    # Traverse all files and subfolders in the source folder\n    for root, dirs, files in os.walk(source_folder):\n        for file in files:\n            # Build target path\n            source_file_path = os.path.join(root, file)\n            target_file_path = os.path.join(target_folder, os.path.relpath(source_file_path, source_folder))\n\n            # Create subfolders in the target folder\n            os.makedirs(os.path.dirname(target_file_path), exist_ok=True)\n\n            # Copy files\n            shutil.copy2(source_file_path, target_file_path)\n\n    print(\"Backup successful\")\n```"}
{"user_prompt": "Write a Python program for file and folder operations, including creating a folder (create_folder), using the open function to create a file in write mode and write the specified content, using the open function to open a file in read mode and read the file content, copying a file (copy_file), moving a file (move_file), and deleting a folder and its contents (delete_folder). For example, # Import file operation related modules\nimport os\nimport shutil\n\n# Create a folder\ncreate_folder('data')\n\n# Create and write a file in the data folder\ninfo_file_path = os.path.join('data', 'info.txt')\ncreate_and_write_file(info_file_path, \"Hello, this is some information.\")\n\n# Read and print the file content\nread_and_print_file(info_file_path)\n\n# Copy the file to info_backup.txt\ninfo_backup_path = os.path.join('data', 'info_backup.txt')\ncopy_file(info_file_path, info_backup_path)\n\n# Move the file to the backup folder\ncreate_folder('backup')\ninfo_backup_new_path = os.path.join('backup', 'info_backup.txt')\nmove_file(info_backup_path, info_backup_new_path)\n\n# Delete the data folder and all its files\ndelete_folder('data')\nImport the os module, and shutil module\nThe program creates a folder (data).\nIn this folder, it creates a file (info.txt) and writes some information.\nIt reads and prints the content of the file.\nIt copies the file to another file (info_backup.txt).\nIt moves the file to another folder (backup).\nIt deletes the original folder (data) and all its files.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a Python program for file and folder operations, including creating a folder (create_folder), using the open function to create a file in write mode and write the specified content, using the open function to open a file in read mode and read the file content, copying a file (copy_file), moving a file (move_file), and deleting a folder and its contents (delete_folder). For example, # Import file operation related modules\nimport os\nimport shutil\n\n# Create a folder\ncreate_folder('data')\n\n# Create and write a file in the data folder\ninfo_file_path = os.path.join('data', 'info.txt')\ncreate_and_write_file(info_file_path, \"Hello, this is some information.\")\n\n# Read and print the file content\nread_and_print_file(info_file_path)\n\n# Copy the file to info_backup.txt\ninfo_backup_path = os.path.join('data', 'info_backup.txt')\ncopy_file(info_file_path, info_backup_path)\n\n# Move the file to the backup folder\ncreate_folder('backup')\ninfo_backup_new_path = os.path.join('backup', 'info_backup.txt')\nmove_file(info_backup_path, info_backup_new_path)\n\n# Delete the data folder and all its files\ndelete_folder('data')\nImport the os module, and shutil module\nThe program creates a folder (data).\nIn this folder, it creates a file (info.txt) and writes some information.\nIt reads and prints the content of the file.\nIt copies the file to another file (info_backup.txt).\nIt moves the file to another folder (backup).\nIt deletes the original folder (data) and all its files.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport os\nimport shutil\n\n\nclass TestFile_process:    def test_create_folder(self):\n        data_folder = 'data'\n        info_file_path = os.path.join(data_folder, 'info.txt')\n        backup_folder = 'backup'\n        info_backup_path = os.path.join(backup_folder, 'info_backup.txt')\n        create_folder(data_folder)\n        assert os.path.exists(data_folder)\n\n    # 测试用例2: 创建并写入文件\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import os\nimport shutil\n\n\nclass TestFile_process:    def test_create_folder(self):\n        data_folder = 'data'\n        info_file_path = os.path.join(data_folder, 'info.txt')\n        backup_folder = 'backup'\n        info_backup_path = os.path.join(backup_folder, 'info_backup.txt')\n        create_folder(data_folder)\n        assert os.path.exists(data_folder)\n\n    # 测试用例2: 创建并写入文件\n", "_id": 148, "response": "```python\nimport os\nimport shutil\n\ndef create_folder(folder_name):\n    if not os.path.exists(folder_name):\n        os.makedirs(folder_name)\n\ndef create_and_write_file(file_path, content):\n    with open(file_path, 'w') as file:\n        file.write(content)\n\ndef read_and_print_file(file_path):\n    with open(file_path, 'r') as file:\n        print(file.read())\n\ndef copy_file(source_file_path, destination_file_path):\n    shutil.copy(source_file_path, destination_file_path)\n\ndef move_file(source_file_path, destination_file_path):\n    shutil.move(source_file_path, destination_file_path)\n\ndef delete_folder(folder_name):\n    shutil.rmtree(folder_name)\n```"}
{"user_prompt": "Write a Python program that accepts a text string as input and uses a regular expression pattern to extract phone numbers from it.\n\nA regular expression pattern is created using re.compile, which is used to match phone numbers. A function named extract_phone_numbers is defined, where the expression: \\(? matches an optional left parenthesis, \\b represents a word boundary, (\\d{3}) matches three digits as the area code, [-.\\s]? matches an optional separator (including hyphen, dot, or space), (\\d{3}) matches three digits as the middle part, also matches an optional separator, (\\d{4}) matches four digits as the end, \\b represents a word boundary.\n\nA finditer method is defined, using pattern.finditer(text) to call the finditer method, returning an iterator that contains all objects matching the pattern.\n\nExtracting and formatting phone numbers:\nIterate through each match object in the matches iterator.\nFor each match object, use match.groups() to get the match groups, i.e., the area code, middle part, and end.\nUse these components to format the phone number in the form of \"(XXX) YYY-ZZZZ\".\nResult storage:\nAdd the formatted phone numbers to the phone_numbers list.\nReturn a list containing all extracted phone numbers. For example, example_text = \"\"\"\nContact List:\n- Alice: (123) 456-7890\n- Bob: 987-654-3210\n- Charlie: (555) 123-4567\n- David: 123.456.7890\n\"\"\"\n\n# Extract phone numbers\nphone_numbers = extract_phone_numbers(example_text)\n\n# Print extracted phone numbers\nprint(\"Extracted Phone Numbers:\")\nfor number in phone_numbers:\n    print(number) In this example, example_text contains some phone numbers in different formats. The extract_phone_numbers function is called to extract and format these phone numbers, then the extracted phone numbers are printed out.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a Python program that accepts a text string as input and uses a regular expression pattern to extract phone numbers from it.\n\nA regular expression pattern is created using re.compile, which is used to match phone numbers. A function named extract_phone_numbers is defined, where the expression: \\(? matches an optional left parenthesis, \\b represents a word boundary, (\\d{3}) matches three digits as the area code, [-.\\s]? matches an optional separator (including hyphen, dot, or space), (\\d{3}) matches three digits as the middle part, also matches an optional separator, (\\d{4}) matches four digits as the end, \\b represents a word boundary.\n\nA finditer method is defined, using pattern.finditer(text) to call the finditer method, returning an iterator that contains all objects matching the pattern.\n\nExtracting and formatting phone numbers:\nIterate through each match object in the matches iterator.\nFor each match object, use match.groups() to get the match groups, i.e., the area code, middle part, and end.\nUse these components to format the phone number in the form of \"(XXX) YYY-ZZZZ\".\nResult storage:\nAdd the formatted phone numbers to the phone_numbers list.\nReturn a list containing all extracted phone numbers. For example, example_text = \"\"\"\nContact List:\n- Alice: (123) 456-7890\n- Bob: 987-654-3210\n- Charlie: (555) 123-4567\n- David: 123.456.7890\n\"\"\"\n\n# Extract phone numbers\nphone_numbers = extract_phone_numbers(example_text)\n\n# Print extracted phone numbers\nprint(\"Extracted Phone Numbers:\")\nfor number in phone_numbers:\n    print(number) In this example, example_text contains some phone numbers in different formats. The extract_phone_numbers function is called to extract and format these phone numbers, then the extracted phone numbers are printed out.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport re\n\n\nclass Testextract_phone_numbers:    def test_valid_format_with_parentheses(self):\n        text = \"联系我们：(123) 456-7890 或者 123-456-7890。\"\n        result = extract_phone_numbers(text)\n        assert result == ['(123) 456-7890', '(123) 456-7890']\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import re\n\n\nclass Testextract_phone_numbers:    def test_valid_format_with_parentheses(self):\n        text = \"联系我们：(123) 456-7890 或者 123-456-7890。\"\n        result = extract_phone_numbers(text)\n        assert result == ['(123) 456-7890', '(123) 456-7890']\n\n", "_id": 149, "response": "```python\nimport re\n\ndef extract_phone_numbers(text):\n    pattern = re.compile(r'\\(?\\b(\\d{3})[-.\\s]?(\\d{3})[-.\\s]?(\\d{4})\\b')\n    matches = pattern.finditer(text)\n    phone_numbers = []\n    for match in matches:\n        area_code, middle, end = match.groups()\n        phone_number = f\"({area_code}) {middle}-{end}\"\n        phone_numbers.append(phone_number)\n    return phone_numbers\n```"}
{"user_prompt": "Write a Python program named find_max_eigenvalues that calculates the maximum eigenvalues and corresponding eigenvectors of a two-dimensional matrix. The input parameters include a two-dimensional array matrix and an optional parameter `num_largest` (default value is 5), which is used to specify the number of maximum eigenvalues to be extracted. The program returns two lists, the first list is the eigenvalue list, and the second list is the corresponding eigenvector list. The program uses the NumPy and SciPy libraries for calculations. If the input matrix is empty or incorrectly formatted, the program will throw a ValueError. For example, for the input matrix: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], and `num_largest` set to 2, the program should return the following results: Eigenvalue list: [18.8302358, -0.67276795], corresponding eigenvector list: [[-0.40962667, -0.54264865, -0.73330651], [0.43402538, -0.82296167, 0.36654613]]. Here, the first eigenvector [-0.40962667, -0.54264865, -0.73330651] corresponds to the maximum eigenvalue 18.8302358, and the second eigenvector [0.43402538, -0.82296167, 0.36654613] corresponds to the second largest eigenvalue -0.67276795.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a Python program named find_max_eigenvalues that calculates the maximum eigenvalues and corresponding eigenvectors of a two-dimensional matrix. The input parameters include a two-dimensional array matrix and an optional parameter `num_largest` (default value is 5), which is used to specify the number of maximum eigenvalues to be extracted. The program returns two lists, the first list is the eigenvalue list, and the second list is the corresponding eigenvector list. The program uses the NumPy and SciPy libraries for calculations. If the input matrix is empty or incorrectly formatted, the program will throw a ValueError. For example, for the input matrix: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], and `num_largest` set to 2, the program should return the following results: Eigenvalue list: [18.8302358, -0.67276795], corresponding eigenvector list: [[-0.40962667, -0.54264865, -0.73330651], [0.43402538, -0.82296167, 0.36654613]]. Here, the first eigenvector [-0.40962667, -0.54264865, -0.73330651] corresponds to the maximum eigenvalue 18.8302358, and the second eigenvector [0.43402538, -0.82296167, 0.36654613] corresponds to the second largest eigenvalue -0.67276795.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport numpy as np\nfrom scipy.linalg import eig\n\n\nclass Testcalculate_eigen:    def test_calculate_eigen_default(self):\n        test_matrix = np.array([[1, 2, 3, 4, 5],\n                                [6, 7, 8, 9, 10],\n                                [11, 12, 13, 14, 15],\n                                [16, 17, 18, 19, 20],\n                                [21, 22, 23, 24, 25]])\n\n        largest_eigenvalues, largest_eigenvectors = calculate_eigen(test_matrix)\n        assert len(largest_eigenvalues) == 5\n        assert largest_eigenvalues[0] < largest_eigenvalues[-1]\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import numpy as np\nfrom scipy.linalg import eig\n\n\nclass Testcalculate_eigen:    def test_calculate_eigen_default(self):\n        test_matrix = np.array([[1, 2, 3, 4, 5],\n                                [6, 7, 8, 9, 10],\n                                [11, 12, 13, 14, 15],\n                                [16, 17, 18, 19, 20],\n                                [21, 22, 23, 24, 25]])\n\n        largest_eigenvalues, largest_eigenvectors = calculate_eigen(test_matrix)\n        assert len(largest_eigenvalues) == 5\n        assert largest_eigenvalues[0] < largest_eigenvalues[-1]\n\n", "_id": 150, "response": "```python\nimport numpy as np\nfrom scipy.linalg import eigh\n\ndef find_max_eigenvalues(matrix, num_largest=5):\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input matrix must be a two-dimensional list.\")\n    if not all(len(row) == len(matrix[0]) for row in matrix):\n        raise ValueError(\"All rows in the input matrix must have the same length.\")\n    if not matrix:\n        raise ValueError(\"Input matrix cannot be empty.\")\n    \n    eigenvalues, eigenvectors = eigh(np.array(matrix))\n    idx = np.argsort(eigenvalues)[-num_largest:]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:,idx]\n    \n    return eigenvalues.tolist()[::-1], eigenvectors.T[::-1].tolist()\n```"}
{"user_prompt": "Write a Python program to flatten a nested list into a one-dimensional list. Define a function called flatten_list to flatten the nested list into a one-dimensional list, and the return value is the flattened_list after flattening. \nCreate an empty list flattened_list to store the elements after flattening. \nCreate a stack stack, and push the initial nested list nested_list into the stack. \nUse a loop to iterate until the stack is empty. \nIn each iteration, pop the current list current from the stack. \nFor each element in current, check its type: \nIf it is a list, push the list into the stack for subsequent flattening. \nIf it is not a list, add the element to flattened_list. \nThe loop continues until the stack is empty, and finally get the flattened list. \nReturn the flattened list flattened_list. For example, \n# Define the nested list\nnested_list = [1, [2, 3, [4, 5]], 6, [7, [8, 9]]]\n\n# Use the flatten_list function to flatten the list\nflattened_list = flatten_list(nested_list)\n\n# Print the result after flattening\nprint(flattened_list)\nIn this example, nested_list contains nested sublists. By calling the flatten_list function, it is flattened into a one-dimensional list flattened_list.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a Python program to flatten a nested list into a one-dimensional list. Define a function called flatten_list to flatten the nested list into a one-dimensional list, and the return value is the flattened_list after flattening. \nCreate an empty list flattened_list to store the elements after flattening. \nCreate a stack stack, and push the initial nested list nested_list into the stack. \nUse a loop to iterate until the stack is empty. \nIn each iteration, pop the current list current from the stack. \nFor each element in current, check its type: \nIf it is a list, push the list into the stack for subsequent flattening. \nIf it is not a list, add the element to flattened_list. \nThe loop continues until the stack is empty, and finally get the flattened list. \nReturn the flattened list flattened_list. For example, \n# Define the nested list\nnested_list = [1, [2, 3, [4, 5]], 6, [7, [8, 9]]]\n\n# Use the flatten_list function to flatten the list\nflattened_list = flatten_list(nested_list)\n\n# Print the result after flattening\nprint(flattened_list)\nIn this example, nested_list contains nested sublists. By calling the flatten_list function, it is flattened into a one-dimensional list flattened_list.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass Testflatten_list:    def test_flatten_list_empty(self):\n        assert flatten_list([]) == []\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass Testflatten_list:    def test_flatten_list_empty(self):\n        assert flatten_list([]) == []\n\n", "_id": 151, "response": "```python\ndef flatten_list(nested_list):\n    flattened_list = []\n    stack = [nested_list]\n    while stack:\n        current = stack.pop()\n        for element in current:\n            if isinstance(element, list):\n                stack.append(element)\n            else:\n                flattened_list.append(element)\n    return flattened_list\n```"}
{"user_prompt": "The list elements in the txt file are separated by tabs, convert the contents into an Excel spreadsheet.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nThe list elements in the txt file are separated by tabs, convert the contents into an Excel spreadsheet.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport openpyxl\n\nclass Testtxt2excle:    def test_txt2excle_1(self, tmp_path):\n        file_path = tmp_path / \"test1.txt\"\n        file_path.write_text(\"1\\t2\\t3\\n4\\t5\\t6\")\n        txt2excle(file_path)\n        workbook = openpyxl.load_workbook('output.xlsx')\n        sheet = workbook.active\n        assert sheet['A1'].value == '1'\n        assert sheet['B1'].value == '2'\n        assert sheet['C1'].value == '3'\n        assert sheet['A2'].value == '4'\n        assert sheet['B2'].value == '5'\n        assert sheet['C2'].value == '6'\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import openpyxl\n\nclass Testtxt2excle:    def test_txt2excle_1(self, tmp_path):\n        file_path = tmp_path / \"test1.txt\"\n        file_path.write_text(\"1\\t2\\t3\\n4\\t5\\t6\")\n        txt2excle(file_path)\n        workbook = openpyxl.load_workbook('output.xlsx')\n        sheet = workbook.active\n        assert sheet['A1'].value == '1'\n        assert sheet['B1'].value == '2'\n        assert sheet['C1'].value == '3'\n        assert sheet['A2'].value == '4'\n        assert sheet['B2'].value == '5'\n        assert sheet['C2'].value == '6'\n\n", "_id": 152, "response": "```python\nimport openpyxl\n\ndef txt2excle(file_path):\n    workbook = openpyxl.Workbook()\n    sheet = workbook.active\n    with open(file_path, 'r') as file:\n        for i, line in enumerate(file):\n            for j, value in enumerate(line.strip().split('\\t')):\n                sheet.cell(row=i+1, column=j+1, value=value)\n    workbook.save('output.xlsx')\n```"}
{"user_prompt": "Use Python, the label data is in VOC format, implement the division of the real box labels with an IoU greater than 0.2 in the given area into category 0.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nUse Python, the label data is in VOC format, implement the division of the real box labels with an IoU greater than 0.2 in the given area into category 0.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport xml.etree.ElementTree as ET\n\n\nclass Testconvert_labels:    def test_convert_labels_1(self, tmp_path):\n        d = tmp_path / \"sub\"\n        d.mkdir()\n        p = d / \"label.xml\"\n        p.write_text('<annotation><object><bndbox><xmin>950</xmin><ymin>786</ymin><xmax>1400</xmax><ymax>1052</ymax></bndbox><name>1</name></object></annotation>')\n        convert_labels(str(p), (950,786,1400,1052))\n        tree = ET.parse(str(p))\n        root = tree.getroot()\n        assert root.find('object').find('name').text == '0'\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import xml.etree.ElementTree as ET\n\n\nclass Testconvert_labels:    def test_convert_labels_1(self, tmp_path):\n        d = tmp_path / \"sub\"\n        d.mkdir()\n        p = d / \"label.xml\"\n        p.write_text('<annotation><object><bndbox><xmin>950</xmin><ymin>786</ymin><xmax>1400</xmax><ymax>1052</ymax></bndbox><name>1</name></object></annotation>')\n        convert_labels(str(p), (950,786,1400,1052))\n        tree = ET.parse(str(p))\n        root = tree.getroot()\n        assert root.find('object').find('name').text == '0'\n\n", "_id": 153, "response": "```python\nimport xml.etree.ElementTree as ET\n\ndef bb_intersection_over_union(boxA, boxB):\n    xA = max(boxA[0], boxB[0])\n    yA = max(boxA[1], boxB[1])\n    xB = min(boxA[2], boxB[2])\n    yB = min(boxA[3], boxB[3])\n    interArea = max(0, xB - xA + 1) * max(0, yB - yA + 1)\n    boxAArea = (boxA[2] - boxA[0] + 1) * (boxA[3] - boxA[1] + 1)\n    boxBArea = (boxB[2] - boxB[0] + 1) * (boxB[3] - boxB[1] + 1)\n    iou = interArea / float(boxAArea + boxBArea - interArea)\n    return iou\n\ndef convert_labels(xml_path, given_area):\n    tree = ET.parse(xml_path)\n    root = tree.getroot()\n    for obj in root.findall('object'):\n        bndbox = obj.find('bndbox')\n        xmin = int(bndbox.find('xmin').text)\n        ymin = int(bndbox.find('ymin').text)\n        xmax = int(bndbox.find('xmax').text)\n        ymax = int(bndbox.find('ymax').text)\n        iou = bb_intersection_over_union((xmin, ymin, xmax, ymax), given_area)\n        if iou > 0.2:\n            obj.find('name').text = '0'\n    tree.write(xml_path)\n```"}
{"user_prompt": "Divide the image classification dataset into training set, test set, and validation set, with the random seed set at 42.\nThe input is the path of the image folder, and the ratio of dividing the training set, test set, and validation set.\nThe output is the folder of the training set, test set, and validation set, and the output folder is directly placed in the dataset directory.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nDivide the image classification dataset into training set, test set, and validation set, with the random seed set at 42.\nThe input is the path of the image folder, and the ratio of dividing the training set, test set, and validation set.\nThe output is the folder of the training set, test set, and validation set, and the output folder is directly placed in the dataset directory.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport os\nimport random\nimport shutil\n\nclass Testsplit_data:    def test_split_data_1(self):\n        dataset_path = 'test1'\n        file_num = len(os.listdir(dataset_path))\n        train_ratio = 0.7\n        test_ratio = 0.2\n        val_ratio = 0.1\n        split_data(dataset_path,train_ratio,test_ratio,val_ratio)\n        assert len(os.listdir(os.path.join(dataset_path,'train'))) == file_num * train_ratio\n        assert len(os.listdir(os.path.join(dataset_path,'test'))) == file_num * test_ratio\n        assert len(os.listdir(os.path.join(dataset_path,'val'))) == file_num * val_ratio\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import os\nimport random\nimport shutil\n\nclass Testsplit_data:    def test_split_data_1(self):\n        dataset_path = 'test1'\n        file_num = len(os.listdir(dataset_path))\n        train_ratio = 0.7\n        test_ratio = 0.2\n        val_ratio = 0.1\n        split_data(dataset_path,train_ratio,test_ratio,val_ratio)\n        assert len(os.listdir(os.path.join(dataset_path,'train'))) == file_num * train_ratio\n        assert len(os.listdir(os.path.join(dataset_path,'test'))) == file_num * test_ratio\n        assert len(os.listdir(os.path.join(dataset_path,'val'))) == file_num * val_ratio\n\n", "_id": 154, "response": "```python\nimport os\nimport random\nimport shutil\n\ndef split_data(dataset_path, train_ratio, test_ratio, val_ratio):\n    random.seed(42)\n    files = os.listdir(dataset_path)\n    random.shuffle(files)\n\n    train_folder = os.path.join(dataset_path, 'train')\n    test_folder = os.path.join(dataset_path, 'test')\n    val_folder = os.path.join(dataset_path, 'val')\n\n    os.makedirs(train_folder, exist_ok=True)\n    os.makedirs(test_folder, exist_ok=True)\n    os.makedirs(val_folder, exist_ok=True)\n\n    train_files = files[:int(len(files)*train_ratio)]\n    test_files = files[int(len(files)*train_ratio):int(len(files)*(train_ratio+test_ratio))]\n    val_files = files[int(len(files)*(train_ratio+test_ratio)):]\n\n    for file in train_files:\n        shutil.move(os.path.join(dataset_path, file), os.path.join(train_folder, file))\n\n    for file in test_files:\n        shutil.move(os.path.join(dataset_path, file), os.path.join(test_folder, file))\n\n    for file in val_files:\n        shutil.move(os.path.join(dataset_path, file), os.path.join(val_folder, file))\n```"}
{"user_prompt": "Implement Hinge loss with numpy.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nImplement Hinge loss with numpy.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport numpy as np\n\n\nclass Testhinge_loss:    def test_hinge_loss_1(self):\n        assert np.isclose(hinge_loss(np.array([1, -1, 1]), np.array([1, -1, 1])), 0.0)\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import numpy as np\n\n\nclass Testhinge_loss:    def test_hinge_loss_1(self):\n        assert np.isclose(hinge_loss(np.array([1, -1, 1]), np.array([1, -1, 1])), 0.0)\n\n", "_id": 155, "response": "```python\nimport numpy as np\n\ndef hinge_loss(y_true, y_pred):\n    return np.maximum(0, 1 - y_true * y_pred).mean()\n```"}
{"user_prompt": "In the field of image processing, there are abnormal blank lines in the annotation files of the YOLO format dataset, which need to be deleted. Input: The folder path of the YOLO format dataset annotation file.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nIn the field of image processing, there are abnormal blank lines in the annotation files of the YOLO format dataset, which need to be deleted. Input: The folder path of the YOLO format dataset annotation file.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport os\n\nclass Testremove_empty_lines_folder:    def test_remove_empty_lines_folder_1(self, tmpdir):\n        p = tmpdir.mkdir(\"sub\").join(\"test1.txt\")\n        p.write(\"0 0.5 0.5 0.5 0.5\\n\\n\\n1 0.5 0.5 0.5 0.5\\n2 0.5 0.5 0.5 0.5\\n\\n3 0.5 0.5 0.5 0.5\\n4 0.5 0.5 0.5 0.5\")\n        remove_empty_lines_folder(str(tmpdir / \"sub\"))\n        assert p.read() == \"0 0.5 0.5 0.5 0.5\\n1 0.5 0.5 0.5 0.5\\n2 0.5 0.5 0.5 0.5\\n3 0.5 0.5 0.5 0.5\\n4 0.5 0.5 0.5 0.5\"\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import os\n\nclass Testremove_empty_lines_folder:    def test_remove_empty_lines_folder_1(self, tmpdir):\n        p = tmpdir.mkdir(\"sub\").join(\"test1.txt\")\n        p.write(\"0 0.5 0.5 0.5 0.5\\n\\n\\n1 0.5 0.5 0.5 0.5\\n2 0.5 0.5 0.5 0.5\\n\\n3 0.5 0.5 0.5 0.5\\n4 0.5 0.5 0.5 0.5\")\n        remove_empty_lines_folder(str(tmpdir / \"sub\"))\n        assert p.read() == \"0 0.5 0.5 0.5 0.5\\n1 0.5 0.5 0.5 0.5\\n2 0.5 0.5 0.5 0.5\\n3 0.5 0.5 0.5 0.5\\n4 0.5 0.5 0.5 0.5\"\n\n", "_id": 156, "response": "```python\nimport os\n\ndef remove_empty_lines_folder(folder_path):\n    for filename in os.listdir(folder_path):\n        if filename.endswith('.txt'):\n            file_path = os.path.join(folder_path, filename)\n            with open(file_path, 'r') as file:\n                lines = file.readlines()\n            with open(file_path, 'w') as file:\n                for line in lines:\n                    if line.strip():\n                        file.write(line)\n```"}
{"user_prompt": "Filter the category in the annotation files of the yolo format dataset in the field of image processing, only retain the category labels in Label_category, and delete other category labels, operate on the original file. Enter the path of the annotation file folder of the yolo format dataset and the Label_category list.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nFilter the category in the annotation files of the yolo format dataset in the field of image processing, only retain the category labels in Label_category, and delete other category labels, operate on the original file. Enter the path of the annotation file folder of the yolo format dataset and the Label_category list.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport os\n\n\nclass Testlabel_filter:    def test_label_filter_1(self, tmpdir):\n        p = tmpdir.mkdir(\"sub\").join(\"test1.txt\")\n        p.write(\"0 0.5 0.5 0.5 0.5\\n1 0.5 0.5 0.5 0.5\\n2 0.5 0.5 0.5 0.5\\n3 0.5 0.5 0.5 0.5\\n4 0.5 0.5 0.5 0.5\")\n        label_filter(str(tmpdir / \"sub\"), [1,2,3])\n        assert p.read() == \"0 0.5 0.5 0.5 0.5\\n4 0.5 0.5 0.5 0.5\\n\"\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import os\n\n\nclass Testlabel_filter:    def test_label_filter_1(self, tmpdir):\n        p = tmpdir.mkdir(\"sub\").join(\"test1.txt\")\n        p.write(\"0 0.5 0.5 0.5 0.5\\n1 0.5 0.5 0.5 0.5\\n2 0.5 0.5 0.5 0.5\\n3 0.5 0.5 0.5 0.5\\n4 0.5 0.5 0.5 0.5\")\n        label_filter(str(tmpdir / \"sub\"), [1,2,3])\n        assert p.read() == \"0 0.5 0.5 0.5 0.5\\n4 0.5 0.5 0.5 0.5\\n\"\n\n", "_id": 157, "response": "```python\nimport os\n\ndef label_filter(path, Label_category):\n    for filename in os.listdir(path):\n        if filename.endswith(\".txt\"):\n            with open(os.path.join(path, filename), 'r') as f:\n                lines = f.readlines()\n            with open(os.path.join(path, filename), 'w') as f:\n                for line in lines:\n                    if int(line.split()[0]) not in Label_category:\n                        f.write(line)\n```"}
{"user_prompt": "Perform category filtering on the annotation files of the yolo format dataset in the field of image processing, where both w and h are greater than limit_wideth and limit_height, operate on the original file. Input the annotation folder path of the yolo format dataset and limit_wideth, limit_height.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nPerform category filtering on the annotation files of the yolo format dataset in the field of image processing, where both w and h are greater than limit_wideth and limit_height, operate on the original file. Input the annotation folder path of the yolo format dataset and limit_wideth, limit_height.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport os\n\n\nclass Testw_h_filter:    def test_w_h_filter_1(self, tmpdir):\n        p = tmpdir.mkdir(\"sub\").join(\"test.txt\")\n        p.write(\"0 0.5 0.5 0.1 0.1\\n1 0.5 0.5 0.2 0.2\")\n        w_h_filter(str(tmpdir / \"sub\"), 0.15, 0.15)\n        assert p.read() == \"1 0.5 0.5 0.2 0.2\\n\"\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import os\n\n\nclass Testw_h_filter:    def test_w_h_filter_1(self, tmpdir):\n        p = tmpdir.mkdir(\"sub\").join(\"test.txt\")\n        p.write(\"0 0.5 0.5 0.1 0.1\\n1 0.5 0.5 0.2 0.2\")\n        w_h_filter(str(tmpdir / \"sub\"), 0.15, 0.15)\n        assert p.read() == \"1 0.5 0.5 0.2 0.2\\n\"\n\n", "_id": 158, "response": "```python\nimport os\n\ndef w_h_filter(folder_path, limit_wideth, limit_height):\n    for filename in os.listdir(folder_path):\n        if filename.endswith(\".txt\"):\n            file_path = os.path.join(folder_path, filename)\n            with open(file_path, \"r\") as file:\n                lines = file.readlines()\n            with open(file_path, \"w\") as file:\n                for line in lines:\n                    parts = line.split()\n                    if float(parts[3]) > limit_wideth and float(parts[4]) > limit_height:\n                        file.write(line)\n```"}
{"user_prompt": "Implement the Mean Squared Error (MSE) loss function using numpy.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nImplement the Mean Squared Error (MSE) loss function using numpy.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass Testmean_squared_error:    def test_mean_squared_error_1(self):\n        y_true = np.array([1, 2, 3, 4, 5])\n        y_pred = np.array([1, 2, 3, 4, 5])\n        assert mean_squared_error(y_true, y_pred) == 0.0\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass Testmean_squared_error:    def test_mean_squared_error_1(self):\n        y_true = np.array([1, 2, 3, 4, 5])\n        y_pred = np.array([1, 2, 3, 4, 5])\n        assert mean_squared_error(y_true, y_pred) == 0.0\n\n", "_id": 159, "response": "```python\nimport numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n    return np.mean((y_true - y_pred) ** 2)\n```"}
{"user_prompt": "Import the nltk package. Define a function with a parameter to receive a sentence, perform tokenization, part-of-speech tagging, stop word removal, and stem extraction operations on this sentence, and output the results of each operation. Then call the defined function.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nImport the nltk package. Define a function with a parameter to receive a sentence, perform tokenization, part-of-speech tagging, stop word removal, and stem extraction operations on this sentence, and output the results of each operation. Then call the defined function.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport nltk\nnltk.data.path.append('averaged_perceptron_tagger')\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import PorterStemmer\n\n\nclass Testprocess_sentence:    def test_process_sentence_1(self):\n        assert process_sentence(\"Hello, world!\") == (['Hello', ',', 'world', '!'], [('Hello', 'NNP'), (',', ','), ('world', 'NN'), ('!', '.')], ['hello', ',', 'world', '!'], ['hello', ',', 'world', '!'])\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import nltk\nnltk.data.path.append('averaged_perceptron_tagger')\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import PorterStemmer\n\n\nclass Testprocess_sentence:    def test_process_sentence_1(self):\n        assert process_sentence(\"Hello, world!\") == (['Hello', ',', 'world', '!'], [('Hello', 'NNP'), (',', ','), ('world', 'NN'), ('!', '.')], ['hello', ',', 'world', '!'], ['hello', ',', 'world', '!'])\n\n", "_id": 160, "response": "```python\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import PorterStemmer\nfrom nltk import pos_tag\n\ndef process_sentence(sentence):\n    # Tokenization\n    tokens = word_tokenize(sentence)\n    \n    # Part-of-speech tagging\n    pos_tags = pos_tag(tokens)\n    \n    # Stop word removal\n    stop_words = set(stopwords.words('english'))\n    filtered_tokens = [token for token in tokens if token.casefold() not in stop_words]\n    \n    # Stem extraction\n    stemmer = PorterStemmer()\n    stemmed_tokens = [stemmer.stem(token) for token in filtered_tokens]\n    \n    return tokens, pos_tags, filtered_tokens, stemmed_tokens\n```"}
{"user_prompt": "There is a dataset.csv, which contains 5 columns: PassengerID, Survived, Pclass, Sex, Age. Please read the file and calculate the probability of the Sex column being female and the Survived column being 1, and the probability of the Sex column being male and the Survived column being 1. Finally, convert the non-numeric columns in the dataset to one-hot encoding, and save the dataset to a new file named new_train.csv.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nThere is a dataset.csv, which contains 5 columns: PassengerID, Survived, Pclass, Sex, Age. Please read the file and calculate the probability of the Sex column being female and the Survived column being 1, and the probability of the Sex column being male and the Survived column being 1. Finally, convert the non-numeric columns in the dataset to one-hot encoding, and save the dataset to a new file named new_train.csv.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport pandas as pd\nfrom sklearn.preprocessing import OneHotEncoder\n\n\nclass Testcalculate_and_save_probabilities:    def test_case1(self):\n        assert calculate_and_save_probabilities(\"test1/dataset.csv\", \"test1/new_train.csv\") == (0.1, 0.8)\n        df1 = pd.read_csv(\"test1/new_train.csv\")\n        df2 = pd.read_csv(\"test1/test_label.csv\")\n        assert df1.equals(df2)\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import pandas as pd\nfrom sklearn.preprocessing import OneHotEncoder\n\n\nclass Testcalculate_and_save_probabilities:    def test_case1(self):\n        assert calculate_and_save_probabilities(\"test1/dataset.csv\", \"test1/new_train.csv\") == (0.1, 0.8)\n        df1 = pd.read_csv(\"test1/new_train.csv\")\n        df2 = pd.read_csv(\"test1/test_label.csv\")\n        assert df1.equals(df2)\n\n", "_id": 161, "response": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import OneHotEncoder\n\ndef calculate_and_save_probabilities(input_file, output_file):\n    # Read the dataset\n    df = pd.read_csv(input_file)\n\n    # Calculate the probabilities\n    female_survived = len(df[(df['Sex'] == 'female') & (df['Survived'] == 1)]) / len(df)\n    male_survived = len(df[(df['Sex'] == 'male') & (df['Survived'] == 1)]) / len(df)\n\n    # Convert non-numeric columns to one-hot encoding\n    non_numeric_columns = df.select_dtypes(include=['object']).columns\n    one_hot_encoder = OneHotEncoder(sparse=False)\n    one_hot_encoded = one_hot_encoder.fit_transform(df[non_numeric_columns])\n    one_hot_encoded_df = pd.DataFrame(one_hot_encoded, columns=one_hot_encoder.get_feature_names(non_numeric_columns))\n\n    # Drop the original non-numeric columns and add the one-hot encoded columns\n    df = df.drop(non_numeric_columns, axis=1)\n    df = pd.concat([df, one_hot_encoded_df], axis=1)\n\n    # Save the new dataset\n    df.to_csv(output_file, index=False)\n\n    return female_survived, male_survived\n```"}
{"user_prompt": "Create a function named `word_count` that takes a file path as an argument, reads the file content, and counts the number of times each word appears in the file. The function should return a dictionary where the keys are the words and the values are the number of times that word appears in the file. It should ignore case and remove punctuation. Finally, the dictionary items should be sorted in descending order by the number of times the word appears. If multiple words appear the same number of times, they should be sorted in ascending alphabetical order. The function does not need to handle the case where the file does not exist.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nCreate a function named `word_count` that takes a file path as an argument, reads the file content, and counts the number of times each word appears in the file. The function should return a dictionary where the keys are the words and the values are the number of times that word appears in the file. It should ignore case and remove punctuation. Finally, the dictionary items should be sorted in descending order by the number of times the word appears. If multiple words appear the same number of times, they should be sorted in ascending alphabetical order. The function does not need to handle the case where the file does not exist.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport string\nfrom collections import Counter\n\n\nclass Testword_count:    def test_word_count_basic_file(self, capfd, tmp_path):\n        file_path = tmp_path / 'test_basic.txt'\n        with open(file_path, 'w', encoding='utf-8') as file:\n            file.write(\"This is a basic test file with some common words.\")\n        word_count(file_path)\n        captured = capfd.readouterr()\n        assert \"'this': 1\\n'is': 1\\n'a': 1\\n'basic': 1\\n'test': 1\\n'file': 1\\n'with': 1\\n'some': 1\\n'common': 1\\n'words': 1\\n\" in captured.out\n\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import string\nfrom collections import Counter\n\n\nclass Testword_count:    def test_word_count_basic_file(self, capfd, tmp_path):\n        file_path = tmp_path / 'test_basic.txt'\n        with open(file_path, 'w', encoding='utf-8') as file:\n            file.write(\"This is a basic test file with some common words.\")\n        word_count(file_path)\n        captured = capfd.readouterr()\n        assert \"'this': 1\\n'is': 1\\n'a': 1\\n'basic': 1\\n'test': 1\\n'file': 1\\n'with': 1\\n'some': 1\\n'common': 1\\n'words': 1\\n\" in captured.out\n\n\n", "_id": 131, "response": "```python\nimport string\nfrom collections import Counter\n\ndef word_count(file_path):\n    with open(file_path, 'r', encoding='utf-8') as file:\n        text = file.read().lower()\n        text = text.translate(str.maketrans('', '', string.punctuation))\n        words = text.split()\n        word_counts = Counter(words)\n        sorted_word_counts = sorted(word_counts.items(), key=lambda x: (-x[1], x[0]))\n        return dict(sorted_word_counts)\n```"}
{"user_prompt": "Given two vectors of equal length x, y, use the numpy toolkit to solve for a and b using the least squares method for linear fitting, and find the slope a, intercept b, and correlation coefficient r.\nFunction usage: a, b, r = linear_fit(x, y)\nPlease complete the code for the linear_fit function.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nGiven two vectors of equal length x, y, use the numpy toolkit to solve for a and b using the least squares method for linear fitting, and find the slope a, intercept b, and correlation coefficient r.\nFunction usage: a, b, r = linear_fit(x, y)\nPlease complete the code for the linear_fit function.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport numpy as np\n\n\nclass Testlinear_fit:    def test_linear_fit_1(self):\n        x = [1, 2, 3, 4, 5]\n        y = [2, 4, 6, 8, 10]\n        a, b, r = linear_fit(x, y)\n        assert a == 2\n        assert b == 0\n        assert r == 0.9999999999999999\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import numpy as np\n\n\nclass Testlinear_fit:    def test_linear_fit_1(self):\n        x = [1, 2, 3, 4, 5]\n        y = [2, 4, 6, 8, 10]\n        a, b, r = linear_fit(x, y)\n        assert a == 2\n        assert b == 0\n        assert r == 0.9999999999999999\n\n", "_id": 162, "response": "```python\nimport numpy as np\n\ndef linear_fit(x, y):\n    A = np.vstack([x, np.ones(len(x))]).T\n    a, b = np.linalg.lstsq(A, y, rcond=None)[0]\n    r = np.corrcoef(x, y)[0, 1]\n    return a, b, r\n```"}
{"user_prompt": "Create a Python class that accepts a path parameter. If the received path does not exist, output \"Invalid directory path.\" If the received path exists, output the names of all files in this path and the names of all files in its subdirectories.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nCreate a Python class that accepts a path parameter. If the received path does not exist, output \"Invalid directory path.\" If the received path exists, output the names of all files in this path and the names of all files in its subdirectories.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass Testlist_files:    def test_list_files_1(self, tmp_path, capsys):\n        d = tmp_path / \"sub\"\n        d.mkdir()\n        p = d / \"hello.txt\"\n        p.write_text(\"content\")\n        list_files(tmp_path)\n        captured = capsys.readouterr()\n        assert captured.out == \"hello.txt\\n\"\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass Testlist_files:    def test_list_files_1(self, tmp_path, capsys):\n        d = tmp_path / \"sub\"\n        d.mkdir()\n        p = d / \"hello.txt\"\n        p.write_text(\"content\")\n        list_files(tmp_path)\n        captured = capsys.readouterr()\n        assert captured.out == \"hello.txt\\n\"\n\n", "_id": 163, "response": "```python\nimport os\n\nclass DirectoryFiles:\n    def __init__(self, path):\n        self.path = path\n\n    def list_files(self):\n        if not os.path.exists(self.path):\n            print(\"Invalid directory path.\")\n        else:\n            for root, dirs, files in os.walk(self.path):\n                for file in files:\n                    print(file)\n```"}
{"user_prompt": "Design a Python function that accepts a filename and a path information, used to check whether the file exists in the specified directory. If it does not exist, output \"The file is not on disk\". If it exists, output the absolute path of the file. If the file exists in the specified directory and there are multiple files with the same name, output the absolute paths of all files with the same name.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nDesign a Python function that accepts a filename and a path information, used to check whether the file exists in the specified directory. If it does not exist, output \"The file is not on disk\". If it exists, output the absolute path of the file. If the file exists in the specified directory and there are multiple files with the same name, output the absolute paths of all files with the same name.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass Testfind_file:    def test_find_file_1(self, tmpdir, capsys):\n        p = tmpdir.mkdir(\"sub\").join(\"hello.txt\")\n        p.write(\"content\")\n        find_file('hello.txt', tmpdir)\n        captured = capsys.readouterr()\n        assert captured.out == f\"{os.path.join(tmpdir, 'sub', 'hello.txt')}\\n\"\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass Testfind_file:    def test_find_file_1(self, tmpdir, capsys):\n        p = tmpdir.mkdir(\"sub\").join(\"hello.txt\")\n        p.write(\"content\")\n        find_file('hello.txt', tmpdir)\n        captured = capsys.readouterr()\n        assert captured.out == f\"{os.path.join(tmpdir, 'sub', 'hello.txt')}\\n\"\n\n", "_id": 164, "response": "```python\nimport os\n\ndef find_file(filename, path):\n    found = False\n    for root, dirs, files in os.walk(path):\n        if filename in files:\n            found = True\n            print(os.path.join(root, filename))\n    if not found:\n        print(\"The file is not on disk\")\n```"}
{"user_prompt": "Given a CSV file that contains multiple columns of data, each column consisting of numbers, read the file and calculate the average of the third column. (Hint, you need to skip the title row)", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nGiven a CSV file that contains multiple columns of data, each column consisting of numbers, read the file and calculate the average of the third column. (Hint, you need to skip the title row)\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass Testcalculate_average:    def test_calculate_average_1(self):\n        assert calculate_average('test1.csv', 2) == 85\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass Testcalculate_average:    def test_calculate_average_1(self):\n        assert calculate_average('test1.csv', 2) == 85\n\n", "_id": 165, "response": "```python\nimport csv\n\ndef calculate_average(file_name, column):\n    with open(file_name, 'r') as file:\n        reader = csv.reader(file)\n        next(reader)  # Skip the header\n        total = 0\n        count = 0\n        for row in reader:\n            total += float(row[column])\n            count += 1\n        return total / count\n```"}
{"user_prompt": "There are multiple CSV files in the data folder, each file has two columns, containing the daily temperature records of a certain city in 2022. The first row is the title, which are Date and Temperature. The temperature value is an integer. I need to find out the highest temperature value and the corresponding date of each city in that year, and save the results to a new CSV file. The result CSV consists of three columns, including city, highest temperature, and date. Note that if the highest temperature is the same for multiple days, keep all dates that reach the highest temperature. How can I use the pandas library's dataframe to complete this task?", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nThere are multiple CSV files in the data folder, each file has two columns, containing the daily temperature records of a certain city in 2022. The first row is the title, which are Date and Temperature. The temperature value is an integer. I need to find out the highest temperature value and the corresponding date of each city in that year, and save the results to a new CSV file. The result CSV consists of three columns, including city, highest temperature, and date. Note that if the highest temperature is the same for multiple days, keep all dates that reach the highest temperature. How can I use the pandas library's dataframe to complete this task?\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport os\n\nclass Testfind_max_temperature:    def test_single_file_single_max(self, tmpdir):\n        data = \"Date,Temperature\\n2022-01-01,10\\n2022-01-02,20\\n2022-01-03,30\"\n        p = tmpdir.mkdir(\"data\").join(\"city1.csv\")\n        p.write(data)\n        output_file = tmpdir.join(\"output.csv\")\n        find_max_temperature(str(tmpdir.join(\"data\")), str(output_file))\n        assert output_file.read() == \"City,Max_Temperature,Date\\ncity1,30,2022-01-03\\n\"\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import os\n\nclass Testfind_max_temperature:    def test_single_file_single_max(self, tmpdir):\n        data = \"Date,Temperature\\n2022-01-01,10\\n2022-01-02,20\\n2022-01-03,30\"\n        p = tmpdir.mkdir(\"data\").join(\"city1.csv\")\n        p.write(data)\n        output_file = tmpdir.join(\"output.csv\")\n        find_max_temperature(str(tmpdir.join(\"data\")), str(output_file))\n        assert output_file.read() == \"City,Max_Temperature,Date\\ncity1,30,2022-01-03\\n\"\n\n", "_id": 166, "response": "```python\nimport pandas as pd\nimport os\n\ndef find_max_temperature(data_folder, output_file):\n    result = []\n    for file in os.listdir(data_folder):\n        if file.endswith('.csv'):\n            city = file[:-4]\n            df = pd.read_csv(os.path.join(data_folder, file))\n            max_temp = df['Temperature'].max()\n            max_dates = df[df['Temperature'] == max_temp]['Date'].tolist()\n            for date in max_dates:\n                result.append([city, max_temp, date])\n    result_df = pd.DataFrame(result, columns=['City', 'Max_Temperature', 'Date'])\n    result_df.to_csv(output_file, index=False)\n```"}
{"user_prompt": "Read data from multiple CSV files, each file representing a data source. Merge these data according to the timestamp, and then calculate the moving average of the merged data.\nThe format of data.csv is\ntimestamp,feature1,feature2,feature3\n2023-03-15 14:30:00,10,20,30\n2023-03-15 14:35:00,11,21,31\n2023-03-15 14:40:00,12,22,32\n...", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nRead data from multiple CSV files, each file representing a data source. Merge these data according to the timestamp, and then calculate the moving average of the merged data.\nThe format of data.csv is\ntimestamp,feature1,feature2,feature3\n2023-03-15 14:30:00,10,20,30\n2023-03-15 14:35:00,11,21,31\n2023-03-15 14:40:00,12,22,32\n...\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport pandas as pd\n\nclass Testmerge_and_smooth_data:    def test_merge_and_smooth_data_1(self):\n        data1 = pd.DataFrame({\n            'timestamp': ['2023-03-15 14:30:00', '2023-03-15 14:35:00', '2023-03-15 14:40:00'],\n            'feature1': [10, 11, 12],\n            'feature2': [20, 21, 22],\n            'feature3': [30, 31, 32]\n        })\n        data1.to_csv('data1.csv.csv', index=False)\n        data2 = pd.DataFrame({\n            'timestamp': ['2023-03-15 14:45:00', '2023-03-15 14:50:00', '2023-03-15 14:55:00'],\n            'feature1': [13, 14, 15],\n            'feature2': [23, 24, 25],\n            'feature3': [33, 34, 35]\n        })\n        data2.to_csv('data2.csv', index=False)\n        assert merge_and_smooth_data(['data1.csv.csv', 'data2.csv'], 2).tolist() == [[11.5, 21.5, 31.5], [12.5, 22.5, 32.5], [13.5, 23.5, 33.5], [14.5, 24.5, 34.5]]\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import pandas as pd\n\nclass Testmerge_and_smooth_data:    def test_merge_and_smooth_data_1(self):\n        data1 = pd.DataFrame({\n            'timestamp': ['2023-03-15 14:30:00', '2023-03-15 14:35:00', '2023-03-15 14:40:00'],\n            'feature1': [10, 11, 12],\n            'feature2': [20, 21, 22],\n            'feature3': [30, 31, 32]\n        })\n        data1.to_csv('data1.csv.csv', index=False)\n        data2 = pd.DataFrame({\n            'timestamp': ['2023-03-15 14:45:00', '2023-03-15 14:50:00', '2023-03-15 14:55:00'],\n            'feature1': [13, 14, 15],\n            'feature2': [23, 24, 25],\n            'feature3': [33, 34, 35]\n        })\n        data2.to_csv('data2.csv', index=False)\n        assert merge_and_smooth_data(['data1.csv.csv', 'data2.csv'], 2).tolist() == [[11.5, 21.5, 31.5], [12.5, 22.5, 32.5], [13.5, 23.5, 33.5], [14.5, 24.5, 34.5]]\n\n", "_id": 167, "response": "```python\nimport pandas as pd\n\ndef merge_and_smooth_data(file_list, window):\n    # Read the first file\n    df = pd.read_csv(file_list[0])\n    \n    # Read the rest of the files and concatenate\n    for file in file_list[1:]:\n        temp_df = pd.read_csv(file)\n        df = pd.concat([df, temp_df])\n    \n    # Sort the dataframe by timestamp\n    df['timestamp'] = pd.to_datetime(df['timestamp'])\n    df = df.sort_values('timestamp')\n    \n    # Calculate the moving average\n    result = df.iloc[:, 1:].rolling(window=window).mean().dropna().values.tolist()\n    \n    return result\n```"}
{"user_prompt": "Please implement focal loss, a method proposed in 2017. Specifically, initialize two parameters alpha and gamma. The forward function receives inputs and targets representing the model output and GT.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nPlease implement focal loss, a method proposed in 2017. Specifically, initialize two parameters alpha and gamma. The forward function receives inputs and targets representing the model output and GT.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport torch\nimport torch.nn as nn\n\nclass Test__init__:    def test_focal_loss_1(self):\n        criterion = FocalLoss(alpha=0.25, gamma=2.0)\n        inputs = torch.tensor([0.1, 0.2, 0.4, 0.8, 1.2, -0.1, -0.2, -0.4, -0.8, -1.2], requires_grad=True)\n        targets = torch.tensor([0., 0., 0., 1., 1., 0., 0., 0., 1., 1.])\n        assert torch.allclose(criterion(inputs, targets).detach(), torch.tensor(0.0649), atol=1e-4)\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import torch\nimport torch.nn as nn\n\nclass Test__init__:    def test_focal_loss_1(self):\n        criterion = FocalLoss(alpha=0.25, gamma=2.0)\n        inputs = torch.tensor([0.1, 0.2, 0.4, 0.8, 1.2, -0.1, -0.2, -0.4, -0.8, -1.2], requires_grad=True)\n        targets = torch.tensor([0., 0., 0., 1., 1., 0., 0., 0., 1., 1.])\n        assert torch.allclose(criterion(inputs, targets).detach(), torch.tensor(0.0649), atol=1e-4)\n\n", "_id": 169, "response": "```python\nclass FocalLoss(nn.Module):\n    def __init__(self, alpha=0.25, gamma=2.0):\n        super(FocalLoss, self).__init__()\n        self.alpha = alpha\n        self.gamma = gamma\n\n    def forward(self, inputs, targets):\n        BCE_loss = nn.BCEWithLogitsLoss(reduction='none')(inputs, targets)\n        pt = torch.exp(-BCE_loss)\n        F_loss = self.alpha * (1-pt)**self.gamma * BCE_loss\n        return F_loss.mean()\n```"}
{"user_prompt": "Use a Python function to accept two path parameters, copy the file pointed to by the first path parameter and move it to the folder pointed to by the second path parameter. If the file does not exist, output \"File not exist.\".", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nUse a Python function to accept two path parameters, copy the file pointed to by the first path parameter and move it to the folder pointed to by the second path parameter. If the file does not exist, output \"File not exist.\".\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport os\n\nclass Testcopy_and_move_file:    def test_copy_and_move_file_1(self):\n        copy_and_move_file('test1/test.txt', 'test1/target')\n        assert os.path.exists('test1/target/test.txt')\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import os\n\nclass Testcopy_and_move_file:    def test_copy_and_move_file_1(self):\n        copy_and_move_file('test1/test.txt', 'test1/target')\n        assert os.path.exists('test1/target/test.txt')\n\n", "_id": 170, "response": "```python\nimport os\nimport shutil\n\ndef copy_and_move_file(source_path, target_folder):\n    if not os.path.isfile(source_path):\n        print(\"File not exist.\")\n        return\n    shutil.copy(source_path, target_folder)\n```"}
{"user_prompt": "Use Python to convert the images in the folder to RGB format, then number the images from smallest to largest, and change the resolution of all images to a specified resolution (x, y). Save the modified folder to the given path. Then output the resolution of all images in the modified folder.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nUse Python to convert the images in the folder to RGB format, then number the images from smallest to largest, and change the resolution of all images to a specified resolution (x, y). Save the modified folder to the given path. Then output the resolution of all images in the modified folder.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nfrom PIL import Image\n\nclass Testresize_and_rename_images:    def test_resize_and_rename_images_1(self, capsys):\n        resize_and_rename_images('test1/input', 'test1/output', (800, 600))\n        captured = capsys.readouterr()\n        assert captured.out == \"Modified images resolutions:\\n001.jpg: 800 x 600\\n002.jpg: 800 x 600\\n003.jpg: 800 x 600\\n\"\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "from PIL import Image\n\nclass Testresize_and_rename_images:    def test_resize_and_rename_images_1(self, capsys):\n        resize_and_rename_images('test1/input', 'test1/output', (800, 600))\n        captured = capsys.readouterr()\n        assert captured.out == \"Modified images resolutions:\\n001.jpg: 800 x 600\\n002.jpg: 800 x 600\\n003.jpg: 800 x 600\\n\"\n\n", "_id": 168, "response": "```python\nimport os\nfrom PIL import Image\n\ndef resize_and_rename_images(input_folder, output_folder, resolution):\n    # Create output folder if it doesn't exist\n    if not os.path.exists(output_folder):\n        os.makedirs(output_folder)\n\n    # Get all files in the input folder\n    files = os.listdir(input_folder)\n\n    # Filter out non-image files\n    images = [file for file in files if file.lower().endswith(('.png', '.jpg', '.jpeg'))]\n\n    # Sort images by name\n    images.sort()\n\n    # Initialize a list to store the resolutions of the modified images\n    modified_resolutions = []\n\n    # Loop through each image\n    for i, image_name in enumerate(images, start=1):\n        # Open the image\n        image = Image.open(os.path.join(input_folder, image_name))\n\n        # Convert the image to RGB\n        image = image.convert('RGB')\n\n        # Resize the image\n        image = image.resize(resolution)\n\n        # Generate new name for the image\n        new_name = f\"{str(i).zfill(3)}.jpg\"\n\n        # Save the image to the output folder\n        image.save(os.path.join(output_folder, new_name))\n\n        # Add the resolution of the modified image to the list\n        modified_resolutions.append(f\"{new_name}: {resolution[0]} x {resolution[1]}\")\n\n    # Print the resolutions of the modified images\n    print(\"Modified images resolutions:\")\n    for resolution in modified_resolutions:\n        print(resolution)\n```"}
{"user_prompt": "Write a Python function that accepts a path parameter, deletes all files in the specified path, and if successfully deleted, outputs \"Successfully delete the folder.\", otherwise outputs \"Can't delete the folder.\"", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a Python function that accepts a path parameter, deletes all files in the specified path, and if successfully deleted, outputs \"Successfully delete the folder.\", otherwise outputs \"Can't delete the folder.\"\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport shutil\nimport os\n\n\nclass Testdelete_folder:    def test_delete_folder_1(self, tmp_path):\n        d = tmp_path / \"sub\"\n        d.mkdir()\n        delete_folder(str(d))\n        assert not os.path.exists(str(d))\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import shutil\nimport os\n\n\nclass Testdelete_folder:    def test_delete_folder_1(self, tmp_path):\n        d = tmp_path / \"sub\"\n        d.mkdir()\n        delete_folder(str(d))\n        assert not os.path.exists(str(d))\n\n", "_id": 172, "response": "```python\nimport os\nimport shutil\n\ndef delete_folder(path):\n    try:\n        shutil.rmtree(path)\n        return \"Successfully delete the folder.\"\n    except Exception as e:\n        return \"Can't delete the folder.\"\n```"}
{"user_prompt": "Define a Python function that uses the docx package to read a Word document, then merges all the paragraph texts in the document into a single string. Iterate through the keyword list, counting the number of times each keyword appears in the string. Finally, call the function to output the results.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nDefine a Python function that uses the docx package to read a Word document, then merges all the paragraph texts in the document into a single string. Iterate through the keyword list, counting the number of times each keyword appears in the string. Finally, call the function to output the results.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nfrom docx import Document\n\n\nclass Testcount_keywords_in_docx:    def test_count_keywords_in_docx_1(self):\n        doc = Document()\n        doc.add_paragraph('test'*10+'python'*5+'docx'*3)\n        doc.save('test1.docx')\n        assert count_keywords_in_docx('test1.docx', ['test', 'python', 'docx']) == {'test': 10, 'python': 5, 'docx': 3}\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "from docx import Document\n\n\nclass Testcount_keywords_in_docx:    def test_count_keywords_in_docx_1(self):\n        doc = Document()\n        doc.add_paragraph('test'*10+'python'*5+'docx'*3)\n        doc.save('test1.docx')\n        assert count_keywords_in_docx('test1.docx', ['test', 'python', 'docx']) == {'test': 10, 'python': 5, 'docx': 3}\n\n", "_id": 171, "response": "```python\nfrom docx import Document\nfrom collections import Counter\n\ndef count_keywords_in_docx(file_path, keywords):\n    doc = Document(file_path)\n    text = ' '.join([paragraph.text for paragraph in doc.paragraphs])\n    word_counts = Counter(text.split())\n    return {keyword: word_counts[keyword] for keyword in keywords}\n```"}
{"user_prompt": "Convert a scipy.sparse.csr_matrix to ndarray and save it in a npy file,\nwhere the initial csr_matrix is saved in a npz file and needs to be loaded before conversion.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nConvert a scipy.sparse.csr_matrix to ndarray and save it in a npy file,\nwhere the initial csr_matrix is saved in a npz file and needs to be loaded before conversion.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport numpy as np\nimport scipy.sparse as sp\n\n\nclass Testcsr_to_numpy:    def test_csr_to_numpy_1(self):\n        csr_to_numpy('test1/test.npz', 'test1/test.npy')\n        assert np.array_equal(np.load('test1/test.npy'), np.load('test1/label.npy'))\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import numpy as np\nimport scipy.sparse as sp\n\n\nclass Testcsr_to_numpy:    def test_csr_to_numpy_1(self):\n        csr_to_numpy('test1/test.npz', 'test1/test.npy')\n        assert np.array_equal(np.load('test1/test.npy'), np.load('test1/label.npy'))\n\n", "_id": 173, "response": "```python\nimport numpy as np\nimport scipy.sparse as sp\n\ndef csr_to_numpy(input_file, output_file):\n    # Load the csr_matrix from the npz file\n    csr_matrix = sp.load_npz(input_file)\n    \n    # Convert the csr_matrix to ndarray\n    ndarray = csr_matrix.toarray()\n    \n    # Save the ndarray in a npy file\n    np.save(output_file, ndarray)\n```"}
{"user_prompt": "Copy the source folder to multiple target directories using multithreading, with each thread handling a portion of the target folder's copy work. After all threads have finished, record the end time and output the duration.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nCopy the source folder to multiple target directories using multithreading, with each thread handling a portion of the target folder's copy work. After all threads have finished, record the end time and output the duration.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport shutil\nimport os\nimport threading\n\nclass Testcopy_folder:    def test_multithread_copy_1(self):\n        multithread_copy(self.source_folder, self.dest_folders[:7])\n        for folder in self.dest_folders[:7]:\n            assert os.path.exists(os.path.join(folder, \"test_file.txt\"))\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import shutil\nimport os\nimport threading\n\nclass Testcopy_folder:    def test_multithread_copy_1(self):\n        multithread_copy(self.source_folder, self.dest_folders[:7])\n        for folder in self.dest_folders[:7]:\n            assert os.path.exists(os.path.join(folder, \"test_file.txt\"))\n\n", "_id": 174, "response": "```python\nimport shutil\nimport os\nimport threading\nimport time\n\ndef copy_folder(source_folder, dest_folder):\n    shutil.copytree(source_folder, dest_folder)\n\ndef multithread_copy(source_folder, dest_folders):\n    threads = []\n    start_time = time.time()\n\n    for folder in dest_folders:\n        thread = threading.Thread(target=copy_folder, args=(source_folder, folder))\n        thread.start()\n        threads.append(thread)\n\n    for thread in threads:\n        thread.join()\n\n    end_time = time.time()\n    duration = end_time - start_time\n    print(f\"Duration: {duration} seconds\")\n```"}
{"user_prompt": "Calculate the cosine similarity of two matrices using sklearn. The dimensions of matrix A and B are the same, initially stored in matrix_A.npy and matrix_B.npy. The final result is a similarity matrix with the same dimensions as matrix A and B, stored in cos_sim.npy.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nCalculate the cosine similarity of two matrices using sklearn. The dimensions of matrix A and B are the same, initially stored in matrix_A.npy and matrix_B.npy. The final result is a similarity matrix with the same dimensions as matrix A and B, stored in cos_sim.npy.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport numpy as np\n\n\nclass Testcalculate_similarity:    def test_calculate_similarity_1(self):\n        A = np.array([[1, 2], [3, 4]])\n        B = np.array([[5, 6], [7, 8]])\n        np.save('matrix_A.npy', A)\n        np.save('matrix_B.npy', B)\n        calculate_similarity('matrix_A.npy', 'matrix_B.npy', 'cos_sim.npy')\n        result = np.load('cos_sim.npy')\n        assert np.array_equal(result, cosine_similarity(A, B))\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import numpy as np\n\n\nclass Testcalculate_similarity:    def test_calculate_similarity_1(self):\n        A = np.array([[1, 2], [3, 4]])\n        B = np.array([[5, 6], [7, 8]])\n        np.save('matrix_A.npy', A)\n        np.save('matrix_B.npy', B)\n        calculate_similarity('matrix_A.npy', 'matrix_B.npy', 'cos_sim.npy')\n        result = np.load('cos_sim.npy')\n        assert np.array_equal(result, cosine_similarity(A, B))\n\n", "_id": 176, "response": "```python\nimport numpy as np\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ndef calculate_similarity(matrix_A_file, matrix_B_file, output_file):\n    # Load matrices from files\n    matrix_A = np.load(matrix_A_file)\n    matrix_B = np.load(matrix_B_file)\n\n    # Calculate cosine similarity\n    cos_sim = cosine_similarity(matrix_A, matrix_B)\n\n    # Save the result to a file\n    np.save(output_file, cos_sim)\n```"}
{"user_prompt": "Convert a sparse ndarray into a scipy.sparse.csr_matrix and save it in an npz file, where the initial ndarray is saved in an npy file and needs to be loaded before conversion.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nConvert a sparse ndarray into a scipy.sparse.csr_matrix and save it in an npz file, where the initial ndarray is saved in an npy file and needs to be loaded before conversion.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport numpy as np\nimport scipy.sparse as sp\n\n\nclass Testnumpy_to_csr:    def test_case1(self):\n        numpy_to_csr('test1/test.npy', 'test1/test.npz')\n        test_arr = sp.load_npz('test1/test.npz').toarray()\n        label_arr = sp.load_npz('test1/label.npz').toarray()\n        assert np.array_equal(test_arr, label_arr)\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import numpy as np\nimport scipy.sparse as sp\n\n\nclass Testnumpy_to_csr:    def test_case1(self):\n        numpy_to_csr('test1/test.npy', 'test1/test.npz')\n        test_arr = sp.load_npz('test1/test.npz').toarray()\n        label_arr = sp.load_npz('test1/label.npz').toarray()\n        assert np.array_equal(test_arr, label_arr)\n\n", "_id": 175, "response": "```python\nimport numpy as np\nimport scipy.sparse as sp\n\ndef numpy_to_csr(input_file, output_file):\n    # Load the numpy array from the npy file\n    array = np.load(input_file)\n\n    # Convert the numpy array to a csr_matrix\n    csr_matrix = sp.csr_matrix(array)\n\n    # Save the csr_matrix to an npz file\n    sp.save_npz(output_file, csr_matrix)\n```"}
{"user_prompt": "Convert two numpy arrays of shape (X, Y, Z) into tensor type and single-precision floating point type. Change the shape of one of them to (X, Z, Y). Calculate the attention scores of these two matrices and output the results. Then write the results into a file named result.txt.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nConvert two numpy arrays of shape (X, Y, Z) into tensor type and single-precision floating point type. Change the shape of one of them to (X, Z, Y). Calculate the attention scores of these two matrices and output the results. Then write the results into a file named result.txt.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport torch\n\nclass Testprocess_tensor:    def test_process_tensor_1(self):\n        array1 = np.ones((3, 9, 5))\n        array2 = np.ones((3, 9, 5))\n        assert torch.all(torch.eq(process_tensor(array1, array2), torch.ones((3, 9, 9))*5))\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import torch\n\nclass Testprocess_tensor:    def test_process_tensor_1(self):\n        array1 = np.ones((3, 9, 5))\n        array2 = np.ones((3, 9, 5))\n        assert torch.all(torch.eq(process_tensor(array1, array2), torch.ones((3, 9, 9))*5))\n\n", "_id": 177, "response": "```python\nimport numpy as np\nimport torch\n\ndef process_tensor(array1, array2):\n    # Convert numpy arrays to tensor\n    tensor1 = torch.tensor(array1, dtype=torch.float32)\n    tensor2 = torch.tensor(array2, dtype=torch.float32)\n\n    # Change the shape of tensor2\n    tensor2 = tensor2.permute(0, 2, 1)\n\n    # Calculate the attention scores\n    attention_scores = torch.bmm(tensor1, tensor2)\n\n    # Write the results into a file\n    with open('result.txt', 'w') as f:\n        f.write(str(attention_scores.tolist()))\n\n    return attention_scores\n```"}
{"user_prompt": "Assuming there is a matrix of size=[N*N], how to set the values above its diagonal to zero, output the resulting matrix, then calculate the sum of the remaining values, and output the sum.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nAssuming there is a matrix of size=[N*N], how to set the values above its diagonal to zero, output the resulting matrix, then calculate the sum of the remaining values, and output the sum.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass Testdiag_zero:    def test_diag_zero_1(self):\n        matrix = np.arange(1, 10).reshape(3, 3)\n        assert diag_zero(matrix) == 34\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass Testdiag_zero:    def test_diag_zero_1(self):\n        matrix = np.arange(1, 10).reshape(3, 3)\n        assert diag_zero(matrix) == 34\n\n", "_id": 179, "response": "```python\nimport numpy as np\n\ndef diag_zero(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            matrix[i][j] = 0\n    return np.sum(matrix)\n```"}
{"user_prompt": "Assume there is a numpy array of size=[N, N]. Calculate the average of the array elements, then keep the elements that are greater than the average unchanged, set the elements that are less than the average to 1, flatten the array into a one-dimensional list, and output the result.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nAssume there is a numpy array of size=[N, N]. Calculate the average of the array elements, then keep the elements that are greater than the average unchanged, set the elements that are less than the average to 1, flatten the array into a one-dimensional list, and output the result.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass Testarray_avg:    def test_array_avg_1(self):\n        matrix = np.array([[2,1,4,3],[4,5,8,9],[10,2,3,4],[1,14,21,2]])\n        mean_value, flattened_array = array_avg(matrix)\n        assert mean_value == 5.8125\n        assert np.all(flattened_array == np.array([2, 1, 4, 3, 4, 5, 0, 0, 0, 2, 3, 4, 1, 0, 0, 2]))\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass Testarray_avg:    def test_array_avg_1(self):\n        matrix = np.array([[2,1,4,3],[4,5,8,9],[10,2,3,4],[1,14,21,2]])\n        mean_value, flattened_array = array_avg(matrix)\n        assert mean_value == 5.8125\n        assert np.all(flattened_array == np.array([2, 1, 4, 3, 4, 5, 0, 0, 0, 2, 3, 4, 1, 0, 0, 2]))\n\n", "_id": 180, "response": "```python\nimport numpy as np\n\ndef array_avg(matrix):\n    mean_value = np.mean(matrix)\n    matrix[matrix < mean_value] = 1\n    flattened_array = matrix.flatten()\n    return mean_value, flattened_array\n```"}
{"user_prompt": "There is a directory with multiple subdirectories, each subdirectory contains a different number of files. Please write a Python program to calculate the total number of files in this directory and print it out.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nThere is a directory with multiple subdirectories, each subdirectory contains a different number of files. Please write a Python program to calculate the total number of files in this directory and print it out.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass Testcount_files:    def test_case1(self, tmpdir):\n        p = tmpdir.mkdir(\"sub\").join(\"hello.txt\")\n        p.write(\"content\")\n        assert count_files(tmpdir) == 1\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass Testcount_files:    def test_case1(self, tmpdir):\n        p = tmpdir.mkdir(\"sub\").join(\"hello.txt\")\n        p.write(\"content\")\n        assert count_files(tmpdir) == 1\n\n", "_id": 181, "response": "```python\nimport os\n\ndef count_files(directory):\n    total_files = 0\n    for dirpath, dirnames, filenames in os.walk(directory):\n        total_files += len(filenames)\n    return total_files\n```"}
{"user_prompt": "Use PCA in the sklearn library to reduce the dimensions of 'characters', and examine the interpretability of each principal component. Here, 'characters' is a pandas.DataFrame, where each row is a sample and each column is a feature, imported from ./characters.csv.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nUse PCA in the sklearn library to reduce the dimensions of 'characters', and examine the interpretability of each principal component. Here, 'characters' is a pandas.DataFrame, where each row is a sample and each column is a feature, imported from ./characters.csv.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\n\nclass Testpac_fit:    def test_pac_fit_1(self):\n        df = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [2, 3, 4, 5, 6], 'C': [3, 4, 5, 6, 7]})\n        df.to_csv('test.csv', index=False)\n        assert np.allclose(pac_fit('test.csv'), np.array([1.00000000e+00, 1.23259516e-32, 4.24471989e-95]), atol=1e-7)\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\n\nclass Testpac_fit:    def test_pac_fit_1(self):\n        df = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [2, 3, 4, 5, 6], 'C': [3, 4, 5, 6, 7]})\n        df.to_csv('test.csv', index=False)\n        assert np.allclose(pac_fit('test.csv'), np.array([1.00000000e+00, 1.23259516e-32, 4.24471989e-95]), atol=1e-7)\n\n", "_id": 182, "response": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\ndef pac_fit(file_path):\n    # Load the data\n    characters = pd.read_csv(file_path)\n    \n    # Standardize the features to have mean=0 and variance=1\n    features = StandardScaler().fit_transform(characters)\n    \n    # Apply PCA\n    pca = PCA()\n    components = pca.fit_transform(features)\n    \n    # Return the explained variance of each principal component\n    return pca.explained_variance_ratio_\n```"}
{"user_prompt": "Write Euclidean, Manhattan, Chebyshev, Minkowski, Cosine similarity, Hamming distance, Jaccard similarity and other distance calculation methods in Python functions. Manually write data to call these distance calculation functions. Output the calculation results.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite Euclidean, Manhattan, Chebyshev, Minkowski, Cosine similarity, Hamming distance, Jaccard similarity and other distance calculation methods in Python functions. Manually write data to call these distance calculation functions. Output the calculation results.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass Testeuclidean_distance:    def test_euclidean_distance_1(self):\n        assert euclidean_distance((1, 2, 3), (4, 5, 6)) == 5.196152422706632\n        assert manhattan_distance((1, 2, 3), (4, 5, 6)) == 9\n        assert chebyshev_distance((1, 2, 3), (4, 5, 6)) == 3\n        assert minkowski_distance((1, 2, 3), (4, 5, 6), 2) == 6.244997998398398\n        assert cosine_similarity([1, 2, 3], [4, 5, 6]) == 0.9746318461970762\n        assert hamming_distance(\"1010101\", \"1001001\") == 3\n        assert jaccard_similarity({1, 2, 3, 4, 5}, {4, 5, 6, 7, 8}) == 0.25\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass Testeuclidean_distance:    def test_euclidean_distance_1(self):\n        assert euclidean_distance((1, 2, 3), (4, 5, 6)) == 5.196152422706632\n        assert manhattan_distance((1, 2, 3), (4, 5, 6)) == 9\n        assert chebyshev_distance((1, 2, 3), (4, 5, 6)) == 3\n        assert minkowski_distance((1, 2, 3), (4, 5, 6), 2) == 6.244997998398398\n        assert cosine_similarity([1, 2, 3], [4, 5, 6]) == 0.9746318461970762\n        assert hamming_distance(\"1010101\", \"1001001\") == 3\n        assert jaccard_similarity({1, 2, 3, 4, 5}, {4, 5, 6, 7, 8}) == 0.25\n\n", "_id": 178, "response": "```python\nfrom math import *\nfrom decimal import Decimal\nfrom scipy.spatial import distance\nimport numpy as np\n\ndef euclidean_distance(x,y):\n    return sqrt(sum(pow(a-b,2) for a, b in zip(x, y)))\n\ndef manhattan_distance(x,y):\n    return sum(abs(a-b) for a,b in zip(x,y))\n\ndef chebyshev_distance(x,y):\n    return max(abs(a-b) for a,b in zip(x,y))\n\ndef nth_root(value, n_root):\n    root_value = 1/float(n_root)\n    return round (Decimal(value) ** Decimal(root_value),3)\n\ndef minkowski_distance(x,y,p_value):\n    return nth_root(sum(pow(abs(a-b),p_value) for a,b in zip(x, y)),p_value)\n\ndef square_rooted(x):\n    return round(sqrt(sum([a*a for a in x])),3)\n\ndef cosine_similarity(x,y):\n    numerator = sum(a*b for a,b in zip(x,y))\n    denominator = square_rooted(x)*square_rooted(y)\n    return round(numerator/float(denominator),3)\n\ndef hamming_distance(string1, string2): \n    i = 0\n    count = 0\n    while(i < len(string1)): \n        if(string1[i] != string2[i]): \n            count += 1\n        i += 1\n    return count \n\ndef jaccard_similarity(x,y):\n    intersection_cardinality = len(set.intersection(*[set(x), set(y)]))\n    union_cardinality = len(set.union(*[set(x), set(y)]))\n    return intersection_cardinality/float(union_cardinality)\n```"}
{"user_prompt": "Design a backup program, which should be written in Python. The program input is the source path and the target path. It should complete the backup of the contents under the specified folder (for example, the data folder). Each backup should include a timestamp, and the backup files should be compressed. The compressed backup files should be stored in another specified folder (for example, the backup folder). There may already be some backup files in the backup folder. When the total size of the backup folder exceeds a threshold (MB), the program should automatically delete the oldest backup files to free up space.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nDesign a backup program, which should be written in Python. The program input is the source path and the target path. It should complete the backup of the contents under the specified folder (for example, the data folder). Each backup should include a timestamp, and the backup files should be compressed. The compressed backup files should be stored in another specified folder (for example, the backup folder). There may already be some backup files in the backup folder. When the total size of the backup folder exceeds a threshold (MB), the program should automatically delete the oldest backup files to free up space.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport os\nimport shutil\nimport zipfile\nfrom datetime import datetime\nimport time\n\n\nclass Testbackup:    def test_backup_1(self, tmp_path):\n        source_path = tmp_path / \"source\"\n        backup_folder = tmp_path / \"backup\"\n        source_path.mkdir()\n        backup_folder.mkdir()\n        (source_path / \"file1.txt\").write_text(\"Hello, World!\")\n        backup(source_path, backup_folder)\n        assert len(list(backup_folder.glob(\"*.zip\"))) == 1\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import os\nimport shutil\nimport zipfile\nfrom datetime import datetime\nimport time\n\n\nclass Testbackup:    def test_backup_1(self, tmp_path):\n        source_path = tmp_path / \"source\"\n        backup_folder = tmp_path / \"backup\"\n        source_path.mkdir()\n        backup_folder.mkdir()\n        (source_path / \"file1.txt\").write_text(\"Hello, World!\")\n        backup(source_path, backup_folder)\n        assert len(list(backup_folder.glob(\"*.zip\"))) == 1\n\n", "_id": 183, "response": "```python\nimport os\nimport shutil\nimport zipfile\nfrom datetime import datetime\nimport time\n\ndef get_folder_size(folder):\n    total = 0\n    for path, dirs, files in os.walk(folder):\n        for f in files:\n            fp = os.path.join(path, f)\n            total += os.path.getsize(fp)\n    return total\n\ndef delete_oldest_file(folder):\n    files = os.listdir(folder)\n    files = [os.path.join(folder, file) for file in files]\n    files.sort(key=lambda x: os.path.getmtime(x))\n    os.remove(files[0])\n\ndef backup(source_path, backup_folder, threshold=100):\n    source_path = str(source_path)\n    backup_folder = str(backup_folder)\n    now = datetime.now()\n    target = backup_folder + os.sep + now.strftime('%Y%m%d%H%M%S') + '.zip'\n\n    zipf = zipfile.ZipFile(target, 'w', zipfile.ZIP_DEFLATED)\n    for root, dirs, files in os.walk(source_path):\n        for file in files:\n            zipf.write(os.path.join(root, file))\n    zipf.close()\n\n    while get_folder_size(backup_folder) > threshold * 1024 * 1024:\n        delete_oldest_file(backup_folder)\n```"}
{"user_prompt": "Please use Python language and PyTorch package to calculate the IOU of two sets of bounding boxes.\n\nEach set of bounding boxes has dimensions of [N, 4], representing N bounding boxes, and 4 represents [x, y, w, h].", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nPlease use Python language and PyTorch package to calculate the IOU of two sets of bounding boxes.\n\nEach set of bounding boxes has dimensions of [N, 4], representing N bounding boxes, and 4 represents [x, y, w, h].\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport torch\n\n\nclass Testbbox_iou:    def test_bbox_iou_1(self):\n        boxes1 = torch.tensor([[10, 20, 30, 40], [30, 40, 50, 60]])\n        boxes2 = torch.tensor([[15, 25, 35, 45], [40, 50, 60, 70]])\n        assert torch.allclose(bbox_iou(boxes1, boxes2), torch.tensor([0.5914, 0.5238]), atol=1e-4)\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import torch\n\n\nclass Testbbox_iou:    def test_bbox_iou_1(self):\n        boxes1 = torch.tensor([[10, 20, 30, 40], [30, 40, 50, 60]])\n        boxes2 = torch.tensor([[15, 25, 35, 45], [40, 50, 60, 70]])\n        assert torch.allclose(bbox_iou(boxes1, boxes2), torch.tensor([0.5914, 0.5238]), atol=1e-4)\n\n", "_id": 184, "response": "```python\nimport torch\n\ndef bbox_iou(boxes1, boxes2):\n    # Calculate the coordinates of the intersection rectangle\n    x1 = torch.max(boxes1[:, 0], boxes2[:, 0])\n    y1 = torch.max(boxes1[:, 1], boxes2[:, 1])\n    x2 = torch.min(boxes1[:, 0] + boxes1[:, 2], boxes2[:, 0] + boxes2[:, 2])\n    y2 = torch.min(boxes1[:, 1] + boxes1[:, 3], boxes2[:, 1] + boxes2[:, 3])\n\n    # Calculate the area of the intersection rectangle\n    intersection = torch.clamp(x2 - x1, min=0) * torch.clamp(y2 - y1, min=0)\n\n    # Calculate the area of each bounding box\n    area1 = boxes1[:, 2] * boxes1[:, 3]\n    area2 = boxes2[:, 2] * boxes2[:, 3]\n\n    # Calculate the area of the union\n    union = area1 + area2 - intersection\n\n    # Calculate the IOU\n    iou = intersection / union\n\n    return iou\n```"}
{"user_prompt": "We need to analyze the access logs of the Nginx server and monitor users with high frequency access. This will help us identify potential abnormal activities, optimize performance, and respond promptly to possible attacks. We need to use python to count the number of accesses for each IP address in the nginx log. The statistical results should be stored in a data file under a data folder for further analysis and auditing.\nUsers with high frequency access are defined as those who access more than 30 times in one second.\nRequirement 1:\nUse a script to extract IP addresses from the Nginx access log and count the number of accesses for each IP address.\nRequirement 2: High frequency access monitoring\nIdentify and record IP addresses with high frequency access for subsequent processing. High frequency is defined as more than 30 accesses in one second. If this IP is a high-frequency abnormal IP, record it in a separate file for subsequent analysis.\nRequirement 3 Data output\nOutput the statistical results to a data file, the format includes the IP address and the corresponding number of accesses. This data file will be used for further analysis and auditing.\nRequirement 4 File format\nAll files are in JSON format, where the key is the IP address and the value is the number of accesses.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWe need to analyze the access logs of the Nginx server and monitor users with high frequency access. This will help us identify potential abnormal activities, optimize performance, and respond promptly to possible attacks. We need to use python to count the number of accesses for each IP address in the nginx log. The statistical results should be stored in a data file under a data folder for further analysis and auditing.\nUsers with high frequency access are defined as those who access more than 30 times in one second.\nRequirement 1:\nUse a script to extract IP addresses from the Nginx access log and count the number of accesses for each IP address.\nRequirement 2: High frequency access monitoring\nIdentify and record IP addresses with high frequency access for subsequent processing. High frequency is defined as more than 30 accesses in one second. If this IP is a high-frequency abnormal IP, record it in a separate file for subsequent analysis.\nRequirement 3 Data output\nOutput the statistical results to a data file, the format includes the IP address and the corresponding number of accesses. This data file will be used for further analysis and auditing.\nRequirement 4 File format\nAll files are in JSON format, where the key is the IP address and the value is the number of accesses.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport re\nfrom collections import defaultdict\n\nclass Testnginx_log_analysis:    def test_nginx_log_analysis_1(self, tmpdir):\n        nginx_log_file = tmpdir.join(\"nginx.log\")\n        nginx_log_file.write(\"192.168.1.1 - - [01/Jan/2021:00:00:01 +0000] \\\"GET / HTTP/1.1\\\" 200 612\\n\" * 35)\n        statistics_output_file = tmpdir.join(\"statistics.json\")\n        high_frequency_output_file = tmpdir.join(\"high_frequency.json\")\n        nginx_log_analysis(nginx_log_file, statistics_output_file, high_frequency_output_file)\n        with open(statistics_output_file, 'r') as f:\n            assert json.load(f) == {\"192.168.1.1\": 35}\n        with open(high_frequency_output_file, 'r') as f:\n            assert json.load(f) == {\"192.168.1.1\": 35}\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import re\nfrom collections import defaultdict\n\nclass Testnginx_log_analysis:    def test_nginx_log_analysis_1(self, tmpdir):\n        nginx_log_file = tmpdir.join(\"nginx.log\")\n        nginx_log_file.write(\"192.168.1.1 - - [01/Jan/2021:00:00:01 +0000] \\\"GET / HTTP/1.1\\\" 200 612\\n\" * 35)\n        statistics_output_file = tmpdir.join(\"statistics.json\")\n        high_frequency_output_file = tmpdir.join(\"high_frequency.json\")\n        nginx_log_analysis(nginx_log_file, statistics_output_file, high_frequency_output_file)\n        with open(statistics_output_file, 'r') as f:\n            assert json.load(f) == {\"192.168.1.1\": 35}\n        with open(high_frequency_output_file, 'r') as f:\n            assert json.load(f) == {\"192.168.1.1\": 35}\n\n", "_id": 185, "response": "```python\nimport re\nimport json\nfrom collections import defaultdict\n\ndef nginx_log_analysis(nginx_log_file, statistics_output_file, high_frequency_output_file):\n    ip_access_count = defaultdict(int)\n    high_frequency_ips = {}\n\n    with open(nginx_log_file, 'r') as f:\n        for line in f:\n            ip = re.findall(r'\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b', line)\n            if ip:\n                ip_access_count[ip[0]] += 1\n                if ip_access_count[ip[0]] > 30:\n                    high_frequency_ips[ip[0]] = ip_access_count[ip[0]]\n\n    with open(statistics_output_file, 'w') as f:\n        json.dump(ip_access_count, f)\n\n    with open(high_frequency_output_file, 'w') as f:\n        json.dump(high_frequency_ips, f)\n```"}
{"user_prompt": "Manually write data to demonstrate the use of the K-means clustering algorithm in the scikit-learn library (sklearn). The random seed is 42. Calculate the output results of each data sample.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nManually write data to demonstrate the use of the K-means clustering algorithm in the scikit-learn library (sklearn). The random seed is 42. Calculate the output results of each data sample.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nfrom sklearn.cluster import KMeans\nimport numpy as np\n\n\nclass Testk_means_clustering:    def test_k_means_clustering_1(self):\n        np.random.seed(0)\n        data = np.array([[1, 2], [5, 8], [1.5, 1.8], [8, 8], [1, 0.6], [9, 11]])\n        num_clusters = 2\n        assert np.all(k_means_clustering(data, num_clusters) == np.array([1, 0, 1, 0, 1, 0]))\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "from sklearn.cluster import KMeans\nimport numpy as np\n\n\nclass Testk_means_clustering:    def test_k_means_clustering_1(self):\n        np.random.seed(0)\n        data = np.array([[1, 2], [5, 8], [1.5, 1.8], [8, 8], [1, 0.6], [9, 11]])\n        num_clusters = 2\n        assert np.all(k_means_clustering(data, num_clusters) == np.array([1, 0, 1, 0, 1, 0]))\n\n", "_id": 187, "response": "```python\nfrom sklearn.cluster import KMeans\nimport numpy as np\n\ndef k_means_clustering(data, num_clusters):\n    np.random.seed(42)\n    kmeans = KMeans(n_clusters=num_clusters)\n    kmeans.fit(data)\n    return kmeans.labels_\n```"}
{"user_prompt": "Assume there is a file system that stores both files and directories. \nConsider 'dir' as the only directory in the root directory. 'dir' contains two subdirectories 'subdir1' and 'subdir2'. 'subdir1' contains a file 'file1.ext' and a subdirectory 'subsubdir1'; 'subdir2' contains a subdirectory 'subsubdir2', which contains the file 'file2.ext'.\nIn text format, it is shown as follows (⟶ represents a tab)\ndir\n⟶ subdir1\n⟶ ⟶ file1.ext\n⟶ ⟶ subsubdir1\n⟶ subdir2\n⟶ ⟶ subsubdir2\n⟶ ⟶ ⟶ file2.ext\nIf it is represented in code, the above file system can be written as \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\". '\\n' and '\\t' are newline and tab characters respectively.\nEach file and folder in the file system has a unique absolute path, which is the order of directories that must be opened to reach the location of the file/directory, all paths are connected with '/'. In the above example, the absolute path pointing to 'file2.ext' is \"dir/subdir2/subsubdir2/file2.ext\". Each directory name is composed of letters, numbers and/or spaces, and each file name follows the format of 'name.extension', where 'name' and 'extension' are composed of letters, numbers and/or spaces.\nGiven a string 'input' representing the file system in the above format, return the length of the longest absolute path to the file in the file system. If there are no files in the system, return 0.\nFor example:\n    Input: input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\n    Output: 32\n    Explanation: There are two files:\n    \"dir/subdir1/file1.ext\", path length 21\n    \"dir/subdir2/subsubdir2/file2.ext\", path length 32\n    Return 32, because this is the longest path\nHints:\n    1 <= input.length <= 104\n    input may contain lowercase or uppercase English letters, a newline character '\\n', a tab character '\\t', a dot '.', a space ' ', and numbers.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nAssume there is a file system that stores both files and directories. \nConsider 'dir' as the only directory in the root directory. 'dir' contains two subdirectories 'subdir1' and 'subdir2'. 'subdir1' contains a file 'file1.ext' and a subdirectory 'subsubdir1'; 'subdir2' contains a subdirectory 'subsubdir2', which contains the file 'file2.ext'.\nIn text format, it is shown as follows (⟶ represents a tab)\ndir\n⟶ subdir1\n⟶ ⟶ file1.ext\n⟶ ⟶ subsubdir1\n⟶ subdir2\n⟶ ⟶ subsubdir2\n⟶ ⟶ ⟶ file2.ext\nIf it is represented in code, the above file system can be written as \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\". '\\n' and '\\t' are newline and tab characters respectively.\nEach file and folder in the file system has a unique absolute path, which is the order of directories that must be opened to reach the location of the file/directory, all paths are connected with '/'. In the above example, the absolute path pointing to 'file2.ext' is \"dir/subdir2/subsubdir2/file2.ext\". Each directory name is composed of letters, numbers and/or spaces, and each file name follows the format of 'name.extension', where 'name' and 'extension' are composed of letters, numbers and/or spaces.\nGiven a string 'input' representing the file system in the above format, return the length of the longest absolute path to the file in the file system. If there are no files in the system, return 0.\nFor example:\n    Input: input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\n    Output: 32\n    Explanation: There are two files:\n    \"dir/subdir1/file1.ext\", path length 21\n    \"dir/subdir2/subsubdir2/file2.ext\", path length 32\n    Return 32, because this is the longest path\nHints:\n    1 <= input.length <= 104\n    input may contain lowercase or uppercase English letters, a newline character '\\n', a tab character '\\t', a dot '.', a space ' ', and numbers.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass TestlengthLongestPath:    def test_case1(self):\n        assert lengthLongestPath(\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\") == 32\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass TestlengthLongestPath:    def test_case1(self):\n        assert lengthLongestPath(\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\") == 32\n\n", "_id": 186, "response": "```python\ndef lengthLongestPath(input):\n    maxlen = 0\n    pathlen = {0: 0}\n    for line in input.splitlines():\n        name = line.lstrip('\\t')\n        depth = len(line) - len(name)\n        if '.' in name:\n            maxlen = max(maxlen, pathlen[depth] + len(name))\n        else:\n            pathlen[depth + 1] = pathlen[depth] + len(name) + 1\n    return maxlen\n```"}
{"user_prompt": "Complete gamma brightness correction for images using Python.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nComplete gamma brightness correction for images using Python.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport cv2\n\nclass Testgamma_correction:    def test_gamma_correction_1(self):\n        image = cv2.imread('test1/test.jpg', cv2.IMREAD_COLOR)\n        gamma = 1.5\n        corrected_image = gamma_correction(image, gamma)\n        label = cv2.imread('test1/label.png', cv2.IMREAD_COLOR)\n        assert (corrected_image == label).all()\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import cv2\n\nclass Testgamma_correction:    def test_gamma_correction_1(self):\n        image = cv2.imread('test1/test.jpg', cv2.IMREAD_COLOR)\n        gamma = 1.5\n        corrected_image = gamma_correction(image, gamma)\n        label = cv2.imread('test1/label.png', cv2.IMREAD_COLOR)\n        assert (corrected_image == label).all()\n\n", "_id": 188, "response": "```python\nimport cv2\nimport numpy as np\n\ndef gamma_correction(image, gamma):\n    # build a lookup table mapping the pixel values [0, 255] to\n    # their adjusted gamma values\n    invGamma = 1.0 / gamma\n    table = np.array([((i / 255.0) ** invGamma) * 255\n        for i in np.arange(0, 256)]).astype(\"uint8\")\n\n    # apply gamma correction using the lookup table\n    return cv2.LUT(image, table)\n```"}
{"user_prompt": "Please help me write a piece of code to implement the following requirements: There is a target folder called root folder, which contains files of type file folder. Each file folder contains many files of different types. We need to merge these files of different types in each file folder into pdfs and place them together with the files before the merge.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nPlease help me write a piece of code to implement the following requirements: There is a target folder called root folder, which contains files of type file folder. Each file folder contains many files of different types. We need to merge these files of different types in each file folder into pdfs and place them together with the files before the merge.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport pytest\n\nimport os\nfrom PyPDF2 import PdfMerger, PdfReader\n\nclass Testmerge_pdfs:\n    def test_merge_pdfs_1(self):\n        d = './test1'\n        merge_pdfs(d)\n        page_text = self.readpdf(os.path.join(d, 'sub', \"merged.pdf\"))\n        assert page_text == \"content\"\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import pytest\n\nimport os\nfrom PyPDF2 import PdfMerger, PdfReader\n\nclass Testmerge_pdfs:\n    def test_merge_pdfs_1(self):\n        d = './test1'\n        merge_pdfs(d)\n        page_text = self.readpdf(os.path.join(d, 'sub', \"merged.pdf\"))\n        assert page_text == \"content\"\n\n", "_id": 189, "response": "```python\nimport os\nfrom PyPDF2 import PdfMerger, PdfFileReader\n\ndef merge_pdfs(root_folder):\n    for dirpath, dirnames, filenames in os.walk(root_folder):\n        merger = PdfMerger()\n        for filename in filenames:\n            if filename.endswith('.pdf'):\n                merger.append(os.path.join(dirpath, filename))\n        merger.write(os.path.join(dirpath, \"merged.pdf\"))\n        merger.close()\n\ndef readpdf(file_path):\n    with open(file_path, 'rb') as file:\n        reader = PdfFileReader(file)\n        content = \"\"\n        for page in range(reader.getNumPages()):\n            content += reader.getPage(page).extractText()\n    return content\n```"}
{"user_prompt": "Given a the contents of a CSV file as csv_contents, return the difference in days between the date of the earliest and the oldest entry.\n\nThe CSV file starts with a header row, which contains at least one column called Date.\n\nYou are optionally provided with the pandas library if you need it.  show me the code regarding to this question.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nGiven a the contents of a CSV file as csv_contents, return the difference in days between the date of the earliest and the oldest entry.\n\nThe CSV file starts with a header row, which contains at least one column called Date.\n\nYou are optionally provided with the pandas library if you need it.  show me the code regarding to this question.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport pytest\n\nimport pandas as pd\nfrom io import StringIO\n\nclass Testcalculate_date_difference:    def test_calculate_date_difference_1(self):\n        csv_contents = \"Date\\n2020-01-01\\n2020-01-02\\n2020-01-03\"\n        assert calculate_date_difference(csv_contents) == 2\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import pytest\n\nimport pandas as pd\nfrom io import StringIO\n\nclass Testcalculate_date_difference:    def test_calculate_date_difference_1(self):\n        csv_contents = \"Date\\n2020-01-01\\n2020-01-02\\n2020-01-03\"\n        assert calculate_date_difference(csv_contents) == 2\n\n", "_id": 190, "response": "```python\nimport pandas as pd\nfrom io import StringIO\n\ndef calculate_date_difference(csv_contents):\n    df = pd.read_csv(StringIO(csv_contents))\n    df['Date'] = pd.to_datetime(df['Date'])\n    return (df['Date'].max() - df['Date'].min()).days\n```"}
{"user_prompt": "How to replace a string containing content like ```html  ```, ```css  ```, ```python  ```, ```javascript  ```, ```golang  ``` with strings like <pre><code class=\"language-html\">...</code></pre>, <pre><code class=\"language-css\">...</code></pre>, <pre><code class=\"language-python\">...</code></pre>, <pre><code class=\"language-javascript\">...</code></pre>, <pre><code class=\"language-golang\">...</code></pre>. Please use python code.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nHow to replace a string containing content like ```html  ```, ```css  ```, ```python  ```, ```javascript  ```, ```golang  ``` with strings like <pre><code class=\"language-html\">...</code></pre>, <pre><code class=\"language-css\">...</code></pre>, <pre><code class=\"language-python\">...</code></pre>, <pre><code class=\"language-javascript\">...</code></pre>, <pre><code class=\"language-golang\">...</code></pre>. Please use python code.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport pytest\n\nimport re\n\nclass Testreplace_code_block:    def test_replace_code_block_1(self):\n        assert replace_code_block('```html ```') == '<pre><code class=\"language-html\"></code></pre>'\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import pytest\n\nimport re\n\nclass Testreplace_code_block:    def test_replace_code_block_1(self):\n        assert replace_code_block('```html ```') == '<pre><code class=\"language-html\"></code></pre>'\n", "_id": 192, "response": "```python\nimport re\n\ndef replace_code_block(s):\n    pattern = r'```(.*?)```'\n    replacement = r'<pre><code class=\"language-\\1\"></code></pre>'\n    return re.sub(pattern, replacement, s)\n```"}
{"user_prompt": "I currently have a folder named file_path, which contains some files. These files appear in pairs, for example, mix_7560000_content_document.bin and mix_7560000_content_document.idx form a pair. Now, I want to copy the files from this folder into multiple subfolders, each subfolder containing 10 pairs of data. Each new folder will also have a suffix added, which is 'sub' followed by a number.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nI currently have a folder named file_path, which contains some files. These files appear in pairs, for example, mix_7560000_content_document.bin and mix_7560000_content_document.idx form a pair. Now, I want to copy the files from this folder into multiple subfolders, each subfolder containing 10 pairs of data. Each new folder will also have a suffix added, which is 'sub' followed by a number.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport pytest\n\nimport os\nimport shutil\n\nclass Testcopy_files:    def test_copy_files_1(self, tmpdir):\n        source = tmpdir.mkdir(\"source\")\n        dest = tmpdir.mkdir(\"dest\")\n        for i in range(20):\n            open(os.path.join(source, f\"mix_{i}_content_document.bin\"), 'a').close()\n            open(os.path.join(source, f\"mix_{i}_content_document.idx\"), 'a').close()\n        copy_files(str(source), str(dest))\n        assert len(os.listdir(os.path.join(dest, \"sub0\"))) == 20\n        assert len(os.listdir(os.path.join(dest, \"sub1\"))) == 20\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import pytest\n\nimport os\nimport shutil\n\nclass Testcopy_files:    def test_copy_files_1(self, tmpdir):\n        source = tmpdir.mkdir(\"source\")\n        dest = tmpdir.mkdir(\"dest\")\n        for i in range(20):\n            open(os.path.join(source, f\"mix_{i}_content_document.bin\"), 'a').close()\n            open(os.path.join(source, f\"mix_{i}_content_document.idx\"), 'a').close()\n        copy_files(str(source), str(dest))\n        assert len(os.listdir(os.path.join(dest, \"sub0\"))) == 20\n        assert len(os.listdir(os.path.join(dest, \"sub1\"))) == 20\n\n", "_id": 191, "response": "```python\nimport os\nimport shutil\n\ndef copy_files(source_folder, dest_folder):\n    files = os.listdir(source_folder)\n    files.sort()\n    pairs = [files[n:n+2] for n in range(0, len(files), 2)]\n    for i in range(0, len(pairs), 10):\n        subfolder = os.path.join(dest_folder, 'sub'+str(i//10))\n        os.makedirs(subfolder, exist_ok=True)\n        for pair in pairs[i:i+10]:\n            for file in pair:\n                shutil.copy(os.path.join(source_folder, file), subfolder)\n```"}
{"user_prompt": "How to determine if there are strong or em tags under the p tag text in python etree?\n    <p>\n        3131\n        <strong>AAAA</strong>\n        <strong>BBB</strong>\n        <strong>CCC</strong>\n    </p>", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nHow to determine if there are strong or em tags under the p tag text in python etree?\n    <p>\n        3131\n        <strong>AAAA</strong>\n        <strong>BBB</strong>\n        <strong>CCC</strong>\n    </p>\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport pytest\n\nfrom lxml import etree\n\nclass Testhas_strong_or_em:    def test_has_strong_or_em_1(self):\n        html = \"\"\"\n        <p>\n            3131\n            <strong>AAAA</strong>\n            <strong>BBB</strong>\n            <strong>CCC</strong>\n        </p>\n        \"\"\"\n        root = etree.fromstring(html)\n        assert has_strong_or_em(root) == True\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import pytest\n\nfrom lxml import etree\n\nclass Testhas_strong_or_em:    def test_has_strong_or_em_1(self):\n        html = \"\"\"\n        <p>\n            3131\n            <strong>AAAA</strong>\n            <strong>BBB</strong>\n            <strong>CCC</strong>\n        </p>\n        \"\"\"\n        root = etree.fromstring(html)\n        assert has_strong_or_em(root) == True\n\n", "_id": 194, "response": "```python\nfrom lxml import etree\n\ndef has_strong_or_em(element):\n    if element.tag == 'p':\n        for child in element:\n            if child.tag == 'strong' or child.tag == 'em':\n                return True\n    return False\n```"}
{"user_prompt": "How to flatten the dictionary format in rows of pandas table, with each key-value pair occupying one row? This dictionary might be nested, connect keys at different levels through \".\"", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nHow to flatten the dictionary format in rows of pandas table, with each key-value pair occupying one row? This dictionary might be nested, connect keys at different levels through \".\"\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport pytest\n\nimport pandas as pd\n\nclass Testflatten_dict_to_rows:    def test_flatten_dict_to_rows_1(self):\n        dt = {'A': ['foo', 'bar'], 'B': [{'a': 1, 'b': 2}, {'c': 3, 'd': 4}]}\n        result = flatten_dict_to_rows(dt)\n        expected = pd.DataFrame({'Key': {0: 'A', 1: 'B'}, 'Value': {0: ['foo', 'bar'], 1: [{'a': 1, 'b': 2}, {'c': 3, 'd': 4}]}})\n        pd.testing.assert_frame_equal(result, expected)\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import pytest\n\nimport pandas as pd\n\nclass Testflatten_dict_to_rows:    def test_flatten_dict_to_rows_1(self):\n        dt = {'A': ['foo', 'bar'], 'B': [{'a': 1, 'b': 2}, {'c': 3, 'd': 4}]}\n        result = flatten_dict_to_rows(dt)\n        expected = pd.DataFrame({'Key': {0: 'A', 1: 'B'}, 'Value': {0: ['foo', 'bar'], 1: [{'a': 1, 'b': 2}, {'c': 3, 'd': 4}]}})\n        pd.testing.assert_frame_equal(result, expected)\n\n", "_id": 195, "response": "```python\nimport pandas as pd\n\ndef flatten_dict_to_rows(dt):\n    def flatten_dict(d, parent_key='', sep='.'):\n        items = []\n        for k, v in d.items():\n            new_key = parent_key + sep + k if parent_key else k\n            if isinstance(v, dict):\n                items.extend(flatten_dict(v, new_key, sep=sep).items())\n            else:\n                items.append((new_key, v))\n        return dict(items)\n\n    flat_dict = flatten_dict(dt)\n    df = pd.DataFrame(list(flat_dict.items()), columns=['Key', 'Value'])\n    return df\n```"}
{"user_prompt": "do u remeber i asked questions about calculating ET penman montith with excel and u suggest python would be easier?\n\nso im not good with coding environment can you tell me step by step how can calculate ET with python?\n\nor could you plz write me a code ?", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \ndo u remeber i asked questions about calculating ET penman montith with excel and u suggest python would be easier?\n\nso im not good with coding environment can you tell me step by step how can calculate ET with python?\n\nor could you plz write me a code ?\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport pytest\nimport numpy as np\n\nclass Testcalculate_et:    def test_calculate_et_1(self):\n        assert np.isclose(calculate_et(0.5, 100, 20, 0.5, 25, 2, 50, 30), 57.25573474907341, atol=1e-5)\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import pytest\nimport numpy as np\n\nclass Testcalculate_et:    def test_calculate_et_1(self):\n        assert np.isclose(calculate_et(0.5, 100, 20, 0.5, 25, 2, 50, 30), 57.25573474907341, atol=1e-5)\n\n", "_id": 193, "response": "Sure, I can help you with that. Here is a Python function that calculates ET (Evapotranspiration) using the Penman-Monteith equation. The function takes the following parameters:\n\n- net_rad: Net radiation at the crop surface [MJ m-2 day-1]\n- t: Mean air temperature at 2 m height [°C]\n- ws: Wind speed at 2 m height [m s-1]\n- es: Saturation vapour pressure [kPa]\n- ea: Actual vapour pressure [kPa]\n- delta: Slope vapour pressure curve [kPa °C-1]\n- psy: Psychrometric constant [kPa °C-1]\n\n```python\ndef calculate_et(net_rad, t, ws, es, ea, delta, psy):\n    \"\"\"\n    Calculate evapotranspiration (ET) using the Penman-Monteith equation.\n    \"\"\"\n    # Constants\n    G = 0  # soil heat flux (G) is assumed to be zero during the day\n    Cn = 900  # numerator constant for short reference crops [K mm s3 Mg-1 d-1]\n    Cd = 0.34  # denominator constant for short reference crops [mm K-1]\n\n    # Convert temperature from Celsius to Kelvin\n    t_kelvin = t + 273.15\n\n    # Calculate ET\n    et = ((0.408 * delta * (net_rad - G) + psy * Cn / t_kelvin * ws * (es - ea)) /\n          (delta + psy * (1 + Cd * ws)))\n\n    return et\n```\n\nYou can use this function to calculate ET by providing the required parameters. The function will return the ET value."}
{"user_prompt": "21. Given a MAC address, determine whether this MAC address is within a given MAC address range. If it is, output TRUE, otherwise output FALSE. For example:\nInput 1: B4:AD:A3:31:£2:44, B4:AB:A3:31:£2:44-84:AE:A3:31:E2:44 Output: TRUE\nInput 2: B4:AD:A3:31:£2:44, B4:AD:A3:31:£2:46-B4:AD:A3:31:E2:4A Output: FALSE", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \n21. Given a MAC address, determine whether this MAC address is within a given MAC address range. If it is, output TRUE, otherwise output FALSE. For example:\nInput 1: B4:AD:A3:31:£2:44, B4:AB:A3:31:£2:44-84:AE:A3:31:E2:44 Output: TRUE\nInput 2: B4:AD:A3:31:£2:44, B4:AD:A3:31:£2:46-B4:AD:A3:31:E2:4A Output: FALSE\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n\n\nclass Testis_mac_in_range:\n    def test_is_mac_in_range_1(self):\n        assert is_mac_in_range('B4:AD:A3:31:E2:44', 'B4:AB:A3:31:E2:44-84:AE:A3:31:E2:44') == False\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "\n\nclass Testis_mac_in_range:\n    def test_is_mac_in_range_1(self):\n        assert is_mac_in_range('B4:AD:A3:31:E2:44', 'B4:AB:A3:31:E2:44-84:AE:A3:31:E2:44') == False\n\n", "_id": 196, "response": "```python\ndef is_mac_in_range(mac, mac_range):\n    mac = int(mac.replace(':', ''), 16)\n    start_mac, end_mac = mac_range.split('-')\n    start_mac = int(start_mac.replace(':', ''), 16)\n    end_mac = int(end_mac.replace(':', ''), 16)\n    return start_mac <= mac <= end_mac\n```"}
{"user_prompt": "Python solution: Suppose the quadratic function p(x)=ax^2+bx+c passes through the points (x_i,y_i) for i=1, 2, 3. Find the values of a, b, and c.\nFor example, if it passes through these three points (-1,1), (0,-1), (2,7), a system of linear equations can be obtained. The solve function in numpy.linalg can be used to solve the equation.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nPython solution: Suppose the quadratic function p(x)=ax^2+bx+c passes through the points (x_i,y_i) for i=1, 2, 3. Find the values of a, b, and c.\nFor example, if it passes through these three points (-1,1), (0,-1), (2,7), a system of linear equations can be obtained. The solve function in numpy.linalg can be used to solve the equation.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport pytest\n\nimport numpy as np\n\nclass Testsolve_quadratic:    def test_solve_quadratic_1(self):\n        points = [(0,0),(1,1),(2,4)]\n        assert np.allclose(solve_quadratic(points), [1, 0, 0])\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import pytest\n\nimport numpy as np\n\nclass Testsolve_quadratic:    def test_solve_quadratic_1(self):\n        points = [(0,0),(1,1),(2,4)]\n        assert np.allclose(solve_quadratic(points), [1, 0, 0])\n\n", "_id": 198, "response": "```python\nimport numpy as np\n\ndef solve_quadratic(points):\n    x_values = [point[0] for point in points]\n    y_values = [point[1] for point in points]\n    matrix = [[x**2, x, 1] for x in x_values]\n    coefficients = np.linalg.solve(matrix, y_values)\n    return coefficients\n```"}
{"user_prompt": "write a funciton that get 4 strings indication 2 ip ranges and tell me if these ip ranges overlap or not", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nwrite a funciton that get 4 strings indication 2 ip ranges and tell me if these ip ranges overlap or not\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport pytest\n\nimport ipaddress\n\nclass Testcheck_ip_overlap:    def test_check_ip_overlap_1(self):\n        assert check_ip_overlap('192.168.1.0/24', '192.168.2.0/24') == False\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import pytest\n\nimport ipaddress\n\nclass Testcheck_ip_overlap:    def test_check_ip_overlap_1(self):\n        assert check_ip_overlap('192.168.1.0/24', '192.168.2.0/24') == False\n\n", "_id": 199, "response": "```python\nimport ipaddress\n\ndef check_ip_overlap(ip_range1, ip_range2):\n    ip_network1 = ipaddress.ip_network(ip_range1)\n    ip_network2 = ipaddress.ip_network(ip_range2)\n\n    return ip_network1.overlaps(ip_network2)\n```"}
{"user_prompt": "I want to write a python program that rename the files of a folder . \nplease remove all letters and keep the numbers", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nI want to write a python program that rename the files of a folder . \nplease remove all letters and keep the numbers\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport pytest\n\nimport os\nimport re\n\nclass Testrename_files_in_folder:    def test_rename_files_in_folder_1(self, tmpdir):\n        p = tmpdir.mkdir(\"sub\").join(\"file123abc.txt\")\n        p.write(\"content\")\n        rename_files_in_folder(str(tmpdir) + '/sub/')\n        assert os.path.isfile(str(tmpdir) + '/sub/123.txt')\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import pytest\n\nimport os\nimport re\n\nclass Testrename_files_in_folder:    def test_rename_files_in_folder_1(self, tmpdir):\n        p = tmpdir.mkdir(\"sub\").join(\"file123abc.txt\")\n        p.write(\"content\")\n        rename_files_in_folder(str(tmpdir) + '/sub/')\n        assert os.path.isfile(str(tmpdir) + '/sub/123.txt')\n\n", "_id": 200, "response": "```python\nimport os\nimport re\n\ndef rename_files_in_folder(folder_path):\n    for filename in os.listdir(folder_path):\n        new_filename = re.sub('[^0-9]', '', filename)\n        os.rename(os.path.join(folder_path, filename), os.path.join(folder_path, new_filename))\n```"}
{"user_prompt": "Write a python code that directly estimates a 18650 lithium-ion battery capacity in Amp hour from a fractional order model with 2 constant phase elements and 3 resistors.", "prompt": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a python code that directly estimates a 18650 lithium-ion battery capacity in Amp hour from a fractional order model with 2 constant phase elements and 3 resistors.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nimport pytest\n\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\nclass Testfractional_order_model:    def test_fractional_order_model_1(self):\n        time_data = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        current_data = np.array([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n        popt, pcov = curve_fit(fractional_order_model, time_data, current_data, bounds=(0, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]))\n        assert round(popt[0], 2) == 0\n\n", "template": "Your task is to generate {language} code to solve the following problem. The generated code must be placed between the ```{language} and ```, and only one code block is allowed: \n{prompt}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \n{test_demo}", "test_demo": "import pytest\n\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\nclass Testfractional_order_model:    def test_fractional_order_model_1(self):\n        time_data = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        current_data = np.array([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n        popt, pcov = curve_fit(fractional_order_model, time_data, current_data, bounds=(0, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]))\n        assert round(popt[0], 2) == 0\n\n", "_id": 197, "response": "```python\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\ndef fractional_order_model(t, R1, R2, R3, Q1, Q2, alpha):\n    \"\"\"\n    Fractional order model with 2 constant phase elements and 3 resistors.\n    \"\"\"\n    Z1 = R1 + Q1 / (1 + (1j * 2 * np.pi * t) ** alpha)\n    Z2 = R2 + Q2 / (1 + (1j * 2 * np.pi * t) ** alpha)\n    Z3 = R3\n    return np.abs(Z1 + Z2 + Z3)\n\ndef estimate_battery_capacity(time_data, current_data):\n    \"\"\"\n    Estimate 18650 lithium-ion battery capacity in Amp hour.\n    \"\"\"\n    popt, pcov = curve_fit(fractional_order_model, time_data, current_data, bounds=(0, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]))\n    return popt[0]\n```"}
